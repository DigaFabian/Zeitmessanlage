
Zeitmessanlage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006a  00800100  00001388  0000141c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001388  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  0080016a  0080016a  00001486  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001486  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000014e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00001524  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000106c  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f9  00000000  00000000  000026a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c77  00000000  00000000  00002f99  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000368  00000000  00000000  00003c10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000782  00000000  00000000  00003f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000931  00000000  00000000  000046fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  0000502b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__ctors_end>
       4:	0c 94 6c 04 	jmp	0x8d8	; 0x8d8 <__vector_1>
       8:	0c 94 84 04 	jmp	0x908	; 0x908 <__vector_2>
       c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      10:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      14:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      18:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      1c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      20:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      24:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      28:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      2c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      30:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      34:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      38:	0c 94 d8 03 	jmp	0x7b0	; 0x7b0 <__vector_14>
      3c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      40:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      44:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      48:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      4c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      50:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      54:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      58:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      5c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      60:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__bad_interrupt>
      68:	9f 00       	.word	0x009f	; ????
      6a:	e3 00       	.word	0x00e3	; ????
      6c:	68 01       	movw	r12, r16
      6e:	ed 01       	movw	r28, r26
      70:	b5 03       	fmuls	r19, r21
      72:	06 02       	muls	r16, r22
      74:	23 02       	muls	r18, r19
      76:	57 02       	muls	r21, r23
      78:	46 02       	muls	r20, r22
      7a:	cf 02       	muls	r28, r31
      7c:	ff 02       	muls	r31, r31

0000007e <__ctors_end>:
      7e:	11 24       	eor	r1, r1
      80:	1f be       	out	0x3f, r1	; 63
      82:	cf ef       	ldi	r28, 0xFF	; 255
      84:	d8 e0       	ldi	r29, 0x08	; 8
      86:	de bf       	out	0x3e, r29	; 62
      88:	cd bf       	out	0x3d, r28	; 61

0000008a <__do_copy_data>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	a0 e0       	ldi	r26, 0x00	; 0
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	e8 e8       	ldi	r30, 0x88	; 136
      92:	f3 e1       	ldi	r31, 0x13	; 19
      94:	02 c0       	rjmp	.+4      	; 0x9a <__do_copy_data+0x10>
      96:	05 90       	lpm	r0, Z+
      98:	0d 92       	st	X+, r0
      9a:	aa 36       	cpi	r26, 0x6A	; 106
      9c:	b1 07       	cpc	r27, r17
      9e:	d9 f7       	brne	.-10     	; 0x96 <__do_copy_data+0xc>

000000a0 <__do_clear_bss>:
      a0:	21 e0       	ldi	r18, 0x01	; 1
      a2:	aa e6       	ldi	r26, 0x6A	; 106
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
      a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
      aa:	a2 38       	cpi	r26, 0x82	; 130
      ac:	b2 07       	cpc	r27, r18
      ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>
      b0:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
      b4:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <_exit>

000000b8 <__bad_interrupt>:
      b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000bc <main>:
unsigned volatile char sensor1state = FALSE;
unsigned volatile char sensor2state = FALSE;


int main(void)
{
      bc:	af 92       	push	r10
      be:	bf 92       	push	r11
      c0:	cf 92       	push	r12
      c2:	df 92       	push	r13
      c4:	ef 92       	push	r14
      c6:	ff 92       	push	r15
      c8:	0f 93       	push	r16
      ca:	1f 93       	push	r17
      cc:	cf 93       	push	r28
      ce:	df 93       	push	r29
      d0:	cd b7       	in	r28, 0x3d	; 61
      d2:	de b7       	in	r29, 0x3e	; 62
      d4:	67 97       	sbiw	r28, 0x17	; 23
      d6:	0f b6       	in	r0, 0x3f	; 63
      d8:	f8 94       	cli
      da:	de bf       	out	0x3e, r29	; 62
      dc:	0f be       	out	0x3f, r0	; 63
      de:	cd bf       	out	0x3d, r28	; 61
		/************************************************************************/
		/* When the reset button is pressed TIME_UNTIL_RESET_MS					*/
		/* milliseconds the software goes back to init state					*/
		/* @see settings.h														*/
		/************************************************************************/
		if(buttonPressTimeMs >= TIME_UNTIL_RESET_MS)
      e0:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <buttonPressTimeMs>
      e4:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <buttonPressTimeMs+0x1>
      e8:	a0 91 7e 01 	lds	r26, 0x017E	; 0x80017e <buttonPressTimeMs+0x2>
      ec:	b0 91 7f 01 	lds	r27, 0x017F	; 0x80017f <buttonPressTimeMs+0x3>
      f0:	80 3d       	cpi	r24, 0xD0	; 208
      f2:	97 40       	sbci	r25, 0x07	; 7
      f4:	a1 05       	cpc	r26, r1
      f6:	b1 05       	cpc	r27, r1
      f8:	64 f0       	brlt	.+24     	; 0x112 <main+0x56>
		{
			nextState = init;
      fa:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <__data_end+0x1>
      fe:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <__data_end>
			buttonPressTimeMs = 0;
     102:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <buttonPressTimeMs>
     106:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <buttonPressTimeMs+0x1>
     10a:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <buttonPressTimeMs+0x2>
     10e:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <buttonPressTimeMs+0x3>
		}
		
		// Main state machine
		switch(nextState)
     112:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <__data_end>
     116:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <__data_end+0x1>
     11a:	09 2e       	mov	r0, r25
     11c:	00 0c       	add	r0, r0
     11e:	aa 0b       	sbc	r26, r26
     120:	bb 0b       	sbc	r27, r27
     122:	40 e0       	ldi	r20, 0x00	; 0
     124:	50 e0       	ldi	r21, 0x00	; 0
     126:	2a e0       	ldi	r18, 0x0A	; 10
     128:	30 e0       	ldi	r19, 0x00	; 0
     12a:	84 1b       	sub	r24, r20
     12c:	95 0b       	sbc	r25, r21
     12e:	28 17       	cp	r18, r24
     130:	39 07       	cpc	r19, r25
     132:	b0 f2       	brcs	.-84     	; 0xe0 <main+0x24>
     134:	8c 5c       	subi	r24, 0xCC	; 204
     136:	9f 4f       	sbci	r25, 0xFF	; 255
     138:	fc 01       	movw	r30, r24
     13a:	0c 94 82 06 	jmp	0xd04	; 0xd04 <__tablejump2__>
			/************************************************************************/
			/* Setup of IO, LCD, Timer, Interrupts									*/
			/* Reset of all running variables										*/                                           
			/************************************************************************/
			case init:
				sensor1state = FALSE;
     13e:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <sensor1state>
				sensor2state = FALSE;
     142:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <sensor2state>
				
				runningTimeMs = 0;
     146:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <runningTimeMs>
     14a:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <runningTimeMs+0x1>
     14e:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <runningTimeMs+0x2>
     152:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <runningTimeMs+0x3>
     156:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <runningTimeMs+0x4>
     15a:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <runningTimeMs+0x5>
     15e:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <runningTimeMs+0x6>
     162:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <runningTimeMs+0x7>
				waitTimeMs = 0;
     166:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <waitTimeMs+0x1>
     16a:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <waitTimeMs>
				startwaitTimeMs = 0;
     16e:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <startwaitTimeMs+0x1>
     172:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <startwaitTimeMs>
				measuredTime = 0;
     176:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <measuredTime>
     17a:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <measuredTime+0x1>
     17e:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <measuredTime+0x2>
     182:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <measuredTime+0x3>
				buttonPressTimeMs = 0;
     186:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <buttonPressTimeMs>
     18a:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <buttonPressTimeMs+0x1>
     18e:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <buttonPressTimeMs+0x2>
     192:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <buttonPressTimeMs+0x3>
					
				setLS1Interrupt(FALSE);
     196:	80 e0       	ldi	r24, 0x00	; 0
     198:	0e 94 0f 05 	call	0xa1e	; 0xa1e <setLS1Interrupt>
				setLS2Interrupt(FALSE);
     19c:	80 e0       	ldi	r24, 0x00	; 0
     19e:	0e 94 53 05 	call	0xaa6	; 0xaa6 <setLS2Interrupt>
				setupButton();
     1a2:	0e 94 74 05 	call	0xae8	; 0xae8 <setupButton>
				setupLichtschranke1();
     1a6:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <setupLichtschranke1>
				setupLichtschranke2();
     1aa:	0e 94 30 05 	call	0xa60	; 0xa60 <setupLichtschranke2>
				LCD_init();
     1ae:	0e 94 3b 06 	call	0xc76	; 0xc76 <LCD_init>
				setupTimer0();
     1b2:	0e 94 9c 04 	call	0x938	; 0x938 <setupTimer0>
				sei();
     1b6:	78 94       	sei
				nextState = checkSensor1;	
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <__data_end+0x1>
     1c0:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <__data_end>
			break;
     1c4:	f4 c2       	rjmp	.+1512   	; 0x7ae <__LOCK_REGION_LENGTH__+0x3ae>
			/* within TIME_UNITL_SENSOR_ERROR_MS milliseconds						*/
			/* the LCD prints an error												*/
			/* @see settings.h														*/
			/************************************************************************/
			case checkSensor1:
				LCD_clear_screan();
     1c6:	0e 94 59 06 	call	0xcb2	; 0xcb2 <LCD_clear_screan>
				set_Curser_position(3,0);
     1ca:	60 e0       	ldi	r22, 0x00	; 0
     1cc:	83 e0       	ldi	r24, 0x03	; 3
     1ce:	0e 94 10 06 	call	0xc20	; 0xc20 <set_Curser_position>
				LCD_print_String("Interrupt");
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	91 e0       	ldi	r25, 0x01	; 1
     1d6:	0e 94 2c 06 	call	0xc58	; 0xc58 <LCD_print_String>
				set_Curser_position(3,1);
     1da:	61 e0       	ldi	r22, 0x01	; 1
     1dc:	83 e0       	ldi	r24, 0x03	; 3
     1de:	0e 94 10 06 	call	0xc20	; 0xc20 <set_Curser_position>
				LCD_print_String("sensor 1");
     1e2:	8a e0       	ldi	r24, 0x0A	; 10
     1e4:	91 e0       	ldi	r25, 0x01	; 1
     1e6:	0e 94 2c 06 	call	0xc58	; 0xc58 <LCD_print_String>
			
				sensor1state = FALSE;
     1ea:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <sensor1state>
				setLS1Interrupt(TRUE);
     1ee:	81 e0       	ldi	r24, 0x01	; 1
     1f0:	0e 94 0f 05 	call	0xa1e	; 0xa1e <setLS1Interrupt>
				
				runningTimeMs = 0;
     1f4:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <runningTimeMs>
     1f8:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <runningTimeMs+0x1>
     1fc:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <runningTimeMs+0x2>
     200:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <runningTimeMs+0x3>
     204:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <runningTimeMs+0x4>
     208:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <runningTimeMs+0x5>
     20c:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <runningTimeMs+0x6>
     210:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <runningTimeMs+0x7>
				while(!sensor1state)
     214:	22 c0       	rjmp	.+68     	; 0x25a <main+0x19e>
				{
					if(runningTimeMs >=TIME_UNITL_SENSOR_ERROR_MS)
     216:	a0 90 6c 01 	lds	r10, 0x016C	; 0x80016c <runningTimeMs>
     21a:	b0 90 6d 01 	lds	r11, 0x016D	; 0x80016d <runningTimeMs+0x1>
     21e:	c0 90 6e 01 	lds	r12, 0x016E	; 0x80016e <runningTimeMs+0x2>
     222:	d0 90 6f 01 	lds	r13, 0x016F	; 0x80016f <runningTimeMs+0x3>
     226:	e0 90 70 01 	lds	r14, 0x0170	; 0x800170 <runningTimeMs+0x4>
     22a:	f0 90 71 01 	lds	r15, 0x0171	; 0x800171 <runningTimeMs+0x5>
     22e:	00 91 72 01 	lds	r16, 0x0172	; 0x800172 <runningTimeMs+0x6>
     232:	10 91 73 01 	lds	r17, 0x0173	; 0x800173 <runningTimeMs+0x7>
     236:	2a 2d       	mov	r18, r10
     238:	3b 2d       	mov	r19, r11
     23a:	4c 2d       	mov	r20, r12
     23c:	5d 2d       	mov	r21, r13
     23e:	6e 2d       	mov	r22, r14
     240:	7f 2d       	mov	r23, r15
     242:	80 2f       	mov	r24, r16
     244:	91 2f       	mov	r25, r17
     246:	2f 30       	cpi	r18, 0x0F	; 15
     248:	37 42       	sbci	r19, 0x27	; 39
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	61 05       	cpc	r22, r1
     250:	71 05       	cpc	r23, r1
     252:	81 05       	cpc	r24, r1
     254:	91 05       	cpc	r25, r1
     256:	09 f0       	breq	.+2      	; 0x25a <main+0x19e>
     258:	28 f4       	brcc	.+10     	; 0x264 <main+0x1a8>
			
				sensor1state = FALSE;
				setLS1Interrupt(TRUE);
				
				runningTimeMs = 0;
				while(!sensor1state)
     25a:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <sensor1state>
     25e:	88 23       	and	r24, r24
     260:	d1 f2       	breq	.-76     	; 0x216 <main+0x15a>
     262:	01 c0       	rjmp	.+2      	; 0x266 <main+0x1aa>
				{
					if(runningTimeMs >=TIME_UNITL_SENSOR_ERROR_MS)
					{
						break;
     264:	00 00       	nop
					}
				}
				if(runningTimeMs >=TIME_UNITL_SENSOR_ERROR_MS)
     266:	a0 90 6c 01 	lds	r10, 0x016C	; 0x80016c <runningTimeMs>
     26a:	b0 90 6d 01 	lds	r11, 0x016D	; 0x80016d <runningTimeMs+0x1>
     26e:	c0 90 6e 01 	lds	r12, 0x016E	; 0x80016e <runningTimeMs+0x2>
     272:	d0 90 6f 01 	lds	r13, 0x016F	; 0x80016f <runningTimeMs+0x3>
     276:	e0 90 70 01 	lds	r14, 0x0170	; 0x800170 <runningTimeMs+0x4>
     27a:	f0 90 71 01 	lds	r15, 0x0171	; 0x800171 <runningTimeMs+0x5>
     27e:	00 91 72 01 	lds	r16, 0x0172	; 0x800172 <runningTimeMs+0x6>
     282:	10 91 73 01 	lds	r17, 0x0173	; 0x800173 <runningTimeMs+0x7>
     286:	2a 2d       	mov	r18, r10
     288:	3b 2d       	mov	r19, r11
     28a:	4c 2d       	mov	r20, r12
     28c:	5d 2d       	mov	r21, r13
     28e:	6e 2d       	mov	r22, r14
     290:	7f 2d       	mov	r23, r15
     292:	80 2f       	mov	r24, r16
     294:	91 2f       	mov	r25, r17
     296:	2f 30       	cpi	r18, 0x0F	; 15
     298:	37 42       	sbci	r19, 0x27	; 39
     29a:	41 05       	cpc	r20, r1
     29c:	51 05       	cpc	r21, r1
     29e:	61 05       	cpc	r22, r1
     2a0:	71 05       	cpc	r23, r1
     2a2:	81 05       	cpc	r24, r1
     2a4:	91 05       	cpc	r25, r1
     2a6:	41 f0       	breq	.+16     	; 0x2b8 <main+0x1fc>
     2a8:	38 f0       	brcs	.+14     	; 0x2b8 <main+0x1fc>
				{
					nextState = errorSensor;
     2aa:	83 e0       	ldi	r24, 0x03	; 3
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <__data_end+0x1>
     2b2:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <__data_end>
     2b6:	06 c0       	rjmp	.+12     	; 0x2c4 <main+0x208>
				}
				else
				{
					nextState = checkSensor2;
     2b8:	82 e0       	ldi	r24, 0x02	; 2
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <__data_end+0x1>
     2c0:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <__data_end>
				}	
				
				setLS1Interrupt(FALSE);
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	0e 94 0f 05 	call	0xa1e	; 0xa1e <setLS1Interrupt>
				sensor1state = FALSE;
     2ca:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <sensor1state>
				
			break;
     2ce:	6f c2       	rjmp	.+1246   	; 0x7ae <__LOCK_REGION_LENGTH__+0x3ae>
			/* within TIME_UNITL_SENSOR_ERROR_MS milliseconds						*/
			/* the LCD prints an error												*/
			/* @see settings.h														*/
			/************************************************************************/
			case checkSensor2:
				LCD_clear_screan();
     2d0:	0e 94 59 06 	call	0xcb2	; 0xcb2 <LCD_clear_screan>
				set_Curser_position(3,0);
     2d4:	60 e0       	ldi	r22, 0x00	; 0
     2d6:	83 e0       	ldi	r24, 0x03	; 3
     2d8:	0e 94 10 06 	call	0xc20	; 0xc20 <set_Curser_position>
				LCD_print_String("Interrupt");
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	91 e0       	ldi	r25, 0x01	; 1
     2e0:	0e 94 2c 06 	call	0xc58	; 0xc58 <LCD_print_String>
				set_Curser_position(3,1);
     2e4:	61 e0       	ldi	r22, 0x01	; 1
     2e6:	83 e0       	ldi	r24, 0x03	; 3
     2e8:	0e 94 10 06 	call	0xc20	; 0xc20 <set_Curser_position>
				LCD_print_String("sensor 2");
     2ec:	83 e1       	ldi	r24, 0x13	; 19
     2ee:	91 e0       	ldi	r25, 0x01	; 1
     2f0:	0e 94 2c 06 	call	0xc58	; 0xc58 <LCD_print_String>
				
				sensor2state = FALSE;
     2f4:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <sensor2state>
				setLS2Interrupt(TRUE);
     2f8:	81 e0       	ldi	r24, 0x01	; 1
     2fa:	0e 94 53 05 	call	0xaa6	; 0xaa6 <setLS2Interrupt>
				
				
				runningTimeMs = 0;
     2fe:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <runningTimeMs>
     302:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <runningTimeMs+0x1>
     306:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <runningTimeMs+0x2>
     30a:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <runningTimeMs+0x3>
     30e:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <runningTimeMs+0x4>
     312:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <runningTimeMs+0x5>
     316:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <runningTimeMs+0x6>
     31a:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <runningTimeMs+0x7>
				while(!sensor2state)
     31e:	22 c0       	rjmp	.+68     	; 0x364 <main+0x2a8>
				{
					if(runningTimeMs >=TIME_UNITL_SENSOR_ERROR_MS)
     320:	a0 90 6c 01 	lds	r10, 0x016C	; 0x80016c <runningTimeMs>
     324:	b0 90 6d 01 	lds	r11, 0x016D	; 0x80016d <runningTimeMs+0x1>
     328:	c0 90 6e 01 	lds	r12, 0x016E	; 0x80016e <runningTimeMs+0x2>
     32c:	d0 90 6f 01 	lds	r13, 0x016F	; 0x80016f <runningTimeMs+0x3>
     330:	e0 90 70 01 	lds	r14, 0x0170	; 0x800170 <runningTimeMs+0x4>
     334:	f0 90 71 01 	lds	r15, 0x0171	; 0x800171 <runningTimeMs+0x5>
     338:	00 91 72 01 	lds	r16, 0x0172	; 0x800172 <runningTimeMs+0x6>
     33c:	10 91 73 01 	lds	r17, 0x0173	; 0x800173 <runningTimeMs+0x7>
     340:	2a 2d       	mov	r18, r10
     342:	3b 2d       	mov	r19, r11
     344:	4c 2d       	mov	r20, r12
     346:	5d 2d       	mov	r21, r13
     348:	6e 2d       	mov	r22, r14
     34a:	7f 2d       	mov	r23, r15
     34c:	80 2f       	mov	r24, r16
     34e:	91 2f       	mov	r25, r17
     350:	2f 30       	cpi	r18, 0x0F	; 15
     352:	37 42       	sbci	r19, 0x27	; 39
     354:	41 05       	cpc	r20, r1
     356:	51 05       	cpc	r21, r1
     358:	61 05       	cpc	r22, r1
     35a:	71 05       	cpc	r23, r1
     35c:	81 05       	cpc	r24, r1
     35e:	91 05       	cpc	r25, r1
     360:	09 f0       	breq	.+2      	; 0x364 <main+0x2a8>
     362:	28 f4       	brcc	.+10     	; 0x36e <main+0x2b2>
				sensor2state = FALSE;
				setLS2Interrupt(TRUE);
				
				
				runningTimeMs = 0;
				while(!sensor2state)
     364:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <sensor2state>
     368:	88 23       	and	r24, r24
     36a:	d1 f2       	breq	.-76     	; 0x320 <main+0x264>
     36c:	01 c0       	rjmp	.+2      	; 0x370 <main+0x2b4>
				{
					if(runningTimeMs >=TIME_UNITL_SENSOR_ERROR_MS)
					{
						break;
     36e:	00 00       	nop
					}
				}
				if(runningTimeMs >=TIME_UNITL_SENSOR_ERROR_MS)
     370:	a0 90 6c 01 	lds	r10, 0x016C	; 0x80016c <runningTimeMs>
     374:	b0 90 6d 01 	lds	r11, 0x016D	; 0x80016d <runningTimeMs+0x1>
     378:	c0 90 6e 01 	lds	r12, 0x016E	; 0x80016e <runningTimeMs+0x2>
     37c:	d0 90 6f 01 	lds	r13, 0x016F	; 0x80016f <runningTimeMs+0x3>
     380:	e0 90 70 01 	lds	r14, 0x0170	; 0x800170 <runningTimeMs+0x4>
     384:	f0 90 71 01 	lds	r15, 0x0171	; 0x800171 <runningTimeMs+0x5>
     388:	00 91 72 01 	lds	r16, 0x0172	; 0x800172 <runningTimeMs+0x6>
     38c:	10 91 73 01 	lds	r17, 0x0173	; 0x800173 <runningTimeMs+0x7>
     390:	2a 2d       	mov	r18, r10
     392:	3b 2d       	mov	r19, r11
     394:	4c 2d       	mov	r20, r12
     396:	5d 2d       	mov	r21, r13
     398:	6e 2d       	mov	r22, r14
     39a:	7f 2d       	mov	r23, r15
     39c:	80 2f       	mov	r24, r16
     39e:	91 2f       	mov	r25, r17
     3a0:	2f 30       	cpi	r18, 0x0F	; 15
     3a2:	37 42       	sbci	r19, 0x27	; 39
     3a4:	41 05       	cpc	r20, r1
     3a6:	51 05       	cpc	r21, r1
     3a8:	61 05       	cpc	r22, r1
     3aa:	71 05       	cpc	r23, r1
     3ac:	81 05       	cpc	r24, r1
     3ae:	91 05       	cpc	r25, r1
     3b0:	41 f0       	breq	.+16     	; 0x3c2 <main+0x306>
     3b2:	38 f0       	brcs	.+14     	; 0x3c2 <main+0x306>
				{
					nextState = errorSensor;
     3b4:	83 e0       	ldi	r24, 0x03	; 3
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <__data_end+0x1>
     3bc:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <__data_end>
     3c0:	06 c0       	rjmp	.+12     	; 0x3ce <main+0x312>
				}
				else
				{
					nextState = initSensor1;
     3c2:	86 e0       	ldi	r24, 0x06	; 6
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <__data_end+0x1>
     3ca:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <__data_end>
				}
				
				setLS2Interrupt(FALSE);
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	0e 94 53 05 	call	0xaa6	; 0xaa6 <setLS2Interrupt>
				sensor2state = FALSE;
     3d4:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <sensor2state>
				
			break;
     3d8:	ea c1       	rjmp	.+980    	; 0x7ae <__LOCK_REGION_LENGTH__+0x3ae>
			/************************************************************************/
			/* If a sensor is not triggered	while in check state                    */
			/* an error is printed on the LCD										*/
			/************************************************************************/
			case errorSensor:
				LCD_clear_screan();
     3da:	0e 94 59 06 	call	0xcb2	; 0xcb2 <LCD_clear_screan>
				set_Curser_position(3,0);
     3de:	60 e0       	ldi	r22, 0x00	; 0
     3e0:	83 e0       	ldi	r24, 0x03	; 3
     3e2:	0e 94 10 06 	call	0xc20	; 0xc20 <set_Curser_position>
				LCD_print_String("Error");
     3e6:	8c e1       	ldi	r24, 0x1C	; 28
     3e8:	91 e0       	ldi	r25, 0x01	; 1
     3ea:	0e 94 2c 06 	call	0xc58	; 0xc58 <LCD_print_String>
				set_Curser_position(3,1);
     3ee:	61 e0       	ldi	r22, 0x01	; 1
     3f0:	83 e0       	ldi	r24, 0x03	; 3
     3f2:	0e 94 10 06 	call	0xc20	; 0xc20 <set_Curser_position>
				LCD_print_String("sensor");
     3f6:	82 e2       	ldi	r24, 0x22	; 34
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	0e 94 2c 06 	call	0xc58	; 0xc58 <LCD_print_String>
				
				nextState = waitForErrorReset;
     3fe:	85 e0       	ldi	r24, 0x05	; 5
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <__data_end+0x1>
     406:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <__data_end>
				
			break;
     40a:	d1 c1       	rjmp	.+930    	; 0x7ae <__LOCK_REGION_LENGTH__+0x3ae>
			/************************************************************************/
			/* After a sensor error the reset button                                */
			/* has to be pressed to start a new sensor check						*/
			/************************************************************************/
			case waitForErrorReset:
				while((BUTTON1_READ & (1<<BUTTON1_MASK))!=(1<<BUTTON1_MASK)){}
     40c:	00 00       	nop
     40e:	89 e2       	ldi	r24, 0x29	; 41
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	fc 01       	movw	r30, r24
     414:	80 81       	ld	r24, Z
     416:	88 2f       	mov	r24, r24
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	80 71       	andi	r24, 0x10	; 16
     41c:	99 27       	eor	r25, r25
     41e:	89 2b       	or	r24, r25
     420:	b1 f3       	breq	.-20     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
				if((BUTTON1_READ & (1<<BUTTON1_MASK))==(1<<BUTTON1_MASK)){
     422:	89 e2       	ldi	r24, 0x29	; 41
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	fc 01       	movw	r30, r24
     428:	80 81       	ld	r24, Z
     42a:	88 2f       	mov	r24, r24
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	80 71       	andi	r24, 0x10	; 16
     430:	99 27       	eor	r25, r25
     432:	89 2b       	or	r24, r25
     434:	09 f4       	brne	.+2      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     436:	b6 c1       	rjmp	.+876    	; 0x7a4 <__LOCK_REGION_LENGTH__+0x3a4>
					nextState = checkSensor1;
     438:	81 e0       	ldi	r24, 0x01	; 1
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <__data_end+0x1>
     440:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <__data_end>
				}
			break;
     444:	af c1       	rjmp	.+862    	; 0x7a4 <__LOCK_REGION_LENGTH__+0x3a4>
			/* Activate sensor 1 / deactivate sensor 2                              */
			/* LCD prints a message that the measurement is ready					*/
			/************************************************************************/	
			case initSensor1:
		
				setLS1Interrupt(TRUE);
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	0e 94 0f 05 	call	0xa1e	; 0xa1e <setLS1Interrupt>
				setLS2Interrupt(FALSE);
     44c:	80 e0       	ldi	r24, 0x00	; 0
     44e:	0e 94 53 05 	call	0xaa6	; 0xaa6 <setLS2Interrupt>
				sensor1state = FALSE;
     452:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <sensor1state>
				sensor2state = FALSE;
     456:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <sensor2state>
				
				LCD_clear_screan();
     45a:	0e 94 59 06 	call	0xcb2	; 0xcb2 <LCD_clear_screan>
				set_Curser_position(3,0);
     45e:	60 e0       	ldi	r22, 0x00	; 0
     460:	83 e0       	ldi	r24, 0x03	; 3
     462:	0e 94 10 06 	call	0xc20	; 0xc20 <set_Curser_position>
				LCD_print_String("Ready to");
     466:	89 e2       	ldi	r24, 0x29	; 41
     468:	91 e0       	ldi	r25, 0x01	; 1
     46a:	0e 94 2c 06 	call	0xc58	; 0xc58 <LCD_print_String>
				set_Curser_position(3,1);
     46e:	61 e0       	ldi	r22, 0x01	; 1
     470:	83 e0       	ldi	r24, 0x03	; 3
     472:	0e 94 10 06 	call	0xc20	; 0xc20 <set_Curser_position>
				LCD_print_String("measure");
     476:	82 e3       	ldi	r24, 0x32	; 50
     478:	91 e0       	ldi	r25, 0x01	; 1
     47a:	0e 94 2c 06 	call	0xc58	; 0xc58 <LCD_print_String>
				
				nextState = startMeasure;
     47e:	87 e0       	ldi	r24, 0x07	; 7
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <__data_end+0x1>
     486:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <__data_end>
				
			break;
     48a:	91 c1       	rjmp	.+802    	; 0x7ae <__LOCK_REGION_LENGTH__+0x3ae>

			/************************************************************************/
			/* Deactivate sensor 1 / activate sensor 2                              */
			/************************************************************************/
			case initSensor2:
				setLS1Interrupt(FALSE);
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	0e 94 0f 05 	call	0xa1e	; 0xa1e <setLS1Interrupt>
				setLS2Interrupt(TRUE);
     492:	81 e0       	ldi	r24, 0x01	; 1
     494:	0e 94 53 05 	call	0xaa6	; 0xaa6 <setLS2Interrupt>
				sensor1state = FALSE;
     498:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <sensor1state>
				sensor2state = FALSE;
     49c:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <sensor2state>
				
				nextState = stopMeasure;
     4a0:	89 e0       	ldi	r24, 0x09	; 9
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <__data_end+0x1>
     4a8:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <__data_end>
			break;
     4ac:	80 c1       	rjmp	.+768    	; 0x7ae <__LOCK_REGION_LENGTH__+0x3ae>
			/* If sensor 1 is triggered within this time, the countdown				*/
			/* starts again															*/
			/* @see settings.h														*/
			/************************************************************************/
			case startMeasure:
				while(!sensor1state){}
     4ae:	00 00       	nop
     4b0:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <sensor1state>
     4b4:	88 23       	and	r24, r24
     4b6:	e1 f3       	breq	.-8      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
				runningTimeMs = 0;
     4b8:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <runningTimeMs>
     4bc:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <runningTimeMs+0x1>
     4c0:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <runningTimeMs+0x2>
     4c4:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <runningTimeMs+0x3>
     4c8:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <runningTimeMs+0x4>
     4cc:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <runningTimeMs+0x5>
     4d0:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <runningTimeMs+0x6>
     4d4:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <runningTimeMs+0x7>
				sensor1state = FALSE;
     4d8:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <sensor1state>
				
				LCD_clear_screan();
     4dc:	0e 94 59 06 	call	0xcb2	; 0xcb2 <LCD_clear_screan>
				set_Curser_position(0,0);
     4e0:	60 e0       	ldi	r22, 0x00	; 0
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	0e 94 10 06 	call	0xc20	; 0xc20 <set_Curser_position>
				LCD_print_String("Measuring time..");
     4e8:	8a e3       	ldi	r24, 0x3A	; 58
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	0e 94 2c 06 	call	0xc58	; 0xc58 <LCD_print_String>
				
				waitTimeMs = 0;
     4f0:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <waitTimeMs+0x1>
     4f4:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <waitTimeMs>
				while(waitTimeMs <=TIME_UNTIL_SENSOR1_WAIT_TIME_RESET_MS)
     4f8:	43 c0       	rjmp	.+134    	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
				{
					waitTimeMs = 0;
     4fa:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <waitTimeMs+0x1>
     4fe:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <waitTimeMs>
					startwaitTimeMs = runningTimeMs;
     502:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <runningTimeMs>
     506:	30 91 6d 01 	lds	r19, 0x016D	; 0x80016d <runningTimeMs+0x1>
     50a:	40 91 6e 01 	lds	r20, 0x016E	; 0x80016e <runningTimeMs+0x2>
     50e:	50 91 6f 01 	lds	r21, 0x016F	; 0x80016f <runningTimeMs+0x3>
     512:	60 91 70 01 	lds	r22, 0x0170	; 0x800170 <runningTimeMs+0x4>
     516:	70 91 71 01 	lds	r23, 0x0171	; 0x800171 <runningTimeMs+0x5>
     51a:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <runningTimeMs+0x6>
     51e:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <runningTimeMs+0x7>
     522:	c9 01       	movw	r24, r18
     524:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <startwaitTimeMs+0x1>
     528:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <startwaitTimeMs>
					
					while(!sensor1state && waitTimeMs<=TIME_UNTIL_SENSOR1_WAIT_TIME_RESET_MS)
     52c:	1c c0       	rjmp	.+56     	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
					{
						waitTimeMs = runningTimeMs-startwaitTimeMs;
     52e:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <runningTimeMs>
     532:	30 91 6d 01 	lds	r19, 0x016D	; 0x80016d <runningTimeMs+0x1>
     536:	40 91 6e 01 	lds	r20, 0x016E	; 0x80016e <runningTimeMs+0x2>
     53a:	50 91 6f 01 	lds	r21, 0x016F	; 0x80016f <runningTimeMs+0x3>
     53e:	60 91 70 01 	lds	r22, 0x0170	; 0x800170 <runningTimeMs+0x4>
     542:	70 91 71 01 	lds	r23, 0x0171	; 0x800171 <runningTimeMs+0x5>
     546:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <runningTimeMs+0x6>
     54a:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <runningTimeMs+0x7>
     54e:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <startwaitTimeMs>
     552:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <startwaitTimeMs+0x1>
     556:	79 01       	movw	r14, r18
     558:	e8 1a       	sub	r14, r24
     55a:	f9 0a       	sbc	r15, r25
     55c:	c7 01       	movw	r24, r14
     55e:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <waitTimeMs+0x1>
     562:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <waitTimeMs>
				while(waitTimeMs <=TIME_UNTIL_SENSOR1_WAIT_TIME_RESET_MS)
				{
					waitTimeMs = 0;
					startwaitTimeMs = runningTimeMs;
					
					while(!sensor1state && waitTimeMs<=TIME_UNTIL_SENSOR1_WAIT_TIME_RESET_MS)
     566:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <sensor1state>
     56a:	88 23       	and	r24, r24
     56c:	39 f4       	brne	.+14     	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
     56e:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <waitTimeMs>
     572:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <waitTimeMs+0x1>
     576:	81 3d       	cpi	r24, 0xD1	; 209
     578:	97 40       	sbci	r25, 0x07	; 7
     57a:	c8 f2       	brcs	.-78     	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
					{
						waitTimeMs = runningTimeMs-startwaitTimeMs;
					}
					sensor1state = FALSE;
     57c:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <sensor1state>
				LCD_clear_screan();
				set_Curser_position(0,0);
				LCD_print_String("Measuring time..");
				
				waitTimeMs = 0;
				while(waitTimeMs <=TIME_UNTIL_SENSOR1_WAIT_TIME_RESET_MS)
     580:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <waitTimeMs>
     584:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <waitTimeMs+0x1>
     588:	81 3d       	cpi	r24, 0xD1	; 209
     58a:	97 40       	sbci	r25, 0x07	; 7
     58c:	08 f4       	brcc	.+2      	; 0x590 <__LOCK_REGION_LENGTH__+0x190>
     58e:	b5 cf       	rjmp	.-150    	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
						waitTimeMs = runningTimeMs-startwaitTimeMs;
					}
					sensor1state = FALSE;
				}
				
				nextState = initSensor2;			
     590:	88 e0       	ldi	r24, 0x08	; 8
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <__data_end+0x1>
     598:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <__data_end>
			break;
     59c:	08 c1       	rjmp	.+528    	; 0x7ae <__LOCK_REGION_LENGTH__+0x3ae>
			/************************************************************************/
			/* When sensor 2 is triggered the measurement stops                     */
			/* All sensor interrupts are deactivated								*/
			/************************************************************************/
			case stopMeasure:
				if(sensor2state)
     59e:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <sensor2state>
     5a2:	88 23       	and	r24, r24
     5a4:	09 f4       	brne	.+2      	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
     5a6:	00 c1       	rjmp	.+512    	; 0x7a8 <__LOCK_REGION_LENGTH__+0x3a8>
				{
					measuredTime = runningTimeMs;
     5a8:	20 91 6c 01 	lds	r18, 0x016C	; 0x80016c <runningTimeMs>
     5ac:	30 91 6d 01 	lds	r19, 0x016D	; 0x80016d <runningTimeMs+0x1>
     5b0:	40 91 6e 01 	lds	r20, 0x016E	; 0x80016e <runningTimeMs+0x2>
     5b4:	50 91 6f 01 	lds	r21, 0x016F	; 0x80016f <runningTimeMs+0x3>
     5b8:	60 91 70 01 	lds	r22, 0x0170	; 0x800170 <runningTimeMs+0x4>
     5bc:	70 91 71 01 	lds	r23, 0x0171	; 0x800171 <runningTimeMs+0x5>
     5c0:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <runningTimeMs+0x6>
     5c4:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <runningTimeMs+0x7>
     5c8:	da 01       	movw	r26, r20
     5ca:	c9 01       	movw	r24, r18
     5cc:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <measuredTime>
     5d0:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <measuredTime+0x1>
     5d4:	a0 93 7a 01 	sts	0x017A, r26	; 0x80017a <measuredTime+0x2>
     5d8:	b0 93 7b 01 	sts	0x017B, r27	; 0x80017b <measuredTime+0x3>
					setLS1Interrupt(FALSE);
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	0e 94 0f 05 	call	0xa1e	; 0xa1e <setLS1Interrupt>
					setLS2Interrupt(FALSE);
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	0e 94 53 05 	call	0xaa6	; 0xaa6 <setLS2Interrupt>
					sensor2state = FALSE;
     5e8:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <sensor2state>
					sensor1state = FALSE;
     5ec:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <sensor1state>
					nextState = printTime;
     5f0:	8a e0       	ldi	r24, 0x0A	; 10
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <__data_end+0x1>
     5f8:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <__data_end>
				}		
			break;
     5fc:	d5 c0       	rjmp	.+426    	; 0x7a8 <__LOCK_REGION_LENGTH__+0x3a8>
			/************************************************************************/
			/* After the measurement is done the measured time                      */
			/* is formatted into: mm:ss:mmm											*/
			/************************************************************************/
			case printTime:
				LCD_clear_screan();
     5fe:	0e 94 59 06 	call	0xcb2	; 0xcb2 <LCD_clear_screan>
				set_Curser_position(0,0);
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	0e 94 10 06 	call	0xc20	; 0xc20 <set_Curser_position>
				LCD_print_String("Measured time:");
     60a:	8b e4       	ldi	r24, 0x4B	; 75
     60c:	91 e0       	ldi	r25, 0x01	; 1
     60e:	0e 94 2c 06 	call	0xc58	; 0xc58 <LCD_print_String>
				set_Curser_position(2,1);
     612:	61 e0       	ldi	r22, 0x01	; 1
     614:	82 e0       	ldi	r24, 0x02	; 2
     616:	0e 94 10 06 	call	0xc20	; 0xc20 <set_Curser_position>
				
				char buffer[17];
				int min = measuredTime/60000;
     61a:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <measuredTime>
     61e:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <measuredTime+0x1>
     622:	a0 91 7a 01 	lds	r26, 0x017A	; 0x80017a <measuredTime+0x2>
     626:	b0 91 7b 01 	lds	r27, 0x017B	; 0x80017b <measuredTime+0x3>
     62a:	20 e6       	ldi	r18, 0x60	; 96
     62c:	3a ee       	ldi	r19, 0xEA	; 234
     62e:	40 e0       	ldi	r20, 0x00	; 0
     630:	50 e0       	ldi	r21, 0x00	; 0
     632:	bc 01       	movw	r22, r24
     634:	cd 01       	movw	r24, r26
     636:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__divmodsi4>
     63a:	da 01       	movw	r26, r20
     63c:	c9 01       	movw	r24, r18
     63e:	9a 83       	std	Y+2, r25	; 0x02
     640:	89 83       	std	Y+1, r24	; 0x01
				measuredTime -= min*60000;
     642:	89 81       	ldd	r24, Y+1	; 0x01
     644:	9a 81       	ldd	r25, Y+2	; 0x02
     646:	9c 01       	movw	r18, r24
     648:	99 0f       	add	r25, r25
     64a:	44 0b       	sbc	r20, r20
     64c:	55 0b       	sbc	r21, r21
     64e:	80 ea       	ldi	r24, 0xA0	; 160
     650:	95 e1       	ldi	r25, 0x15	; 21
     652:	dc 01       	movw	r26, r24
     654:	0e 94 8b 06 	call	0xd16	; 0xd16 <__mulohisi3>
     658:	9b 01       	movw	r18, r22
     65a:	ac 01       	movw	r20, r24
     65c:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <measuredTime>
     660:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <measuredTime+0x1>
     664:	a0 91 7a 01 	lds	r26, 0x017A	; 0x80017a <measuredTime+0x2>
     668:	b0 91 7b 01 	lds	r27, 0x017B	; 0x80017b <measuredTime+0x3>
     66c:	82 0f       	add	r24, r18
     66e:	93 1f       	adc	r25, r19
     670:	a4 1f       	adc	r26, r20
     672:	b5 1f       	adc	r27, r21
     674:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <measuredTime>
     678:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <measuredTime+0x1>
     67c:	a0 93 7a 01 	sts	0x017A, r26	; 0x80017a <measuredTime+0x2>
     680:	b0 93 7b 01 	sts	0x017B, r27	; 0x80017b <measuredTime+0x3>

				int secs = measuredTime/1000;
     684:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <measuredTime>
     688:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <measuredTime+0x1>
     68c:	a0 91 7a 01 	lds	r26, 0x017A	; 0x80017a <measuredTime+0x2>
     690:	b0 91 7b 01 	lds	r27, 0x017B	; 0x80017b <measuredTime+0x3>
     694:	28 ee       	ldi	r18, 0xE8	; 232
     696:	33 e0       	ldi	r19, 0x03	; 3
     698:	40 e0       	ldi	r20, 0x00	; 0
     69a:	50 e0       	ldi	r21, 0x00	; 0
     69c:	bc 01       	movw	r22, r24
     69e:	cd 01       	movw	r24, r26
     6a0:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__divmodsi4>
     6a4:	da 01       	movw	r26, r20
     6a6:	c9 01       	movw	r24, r18
     6a8:	9c 83       	std	Y+4, r25	; 0x04
     6aa:	8b 83       	std	Y+3, r24	; 0x03
				measuredTime -= secs*1000; 
     6ac:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <measuredTime>
     6b0:	30 91 79 01 	lds	r19, 0x0179	; 0x800179 <measuredTime+0x1>
     6b4:	40 91 7a 01 	lds	r20, 0x017A	; 0x80017a <measuredTime+0x2>
     6b8:	50 91 7b 01 	lds	r21, 0x017B	; 0x80017b <measuredTime+0x3>
     6bc:	eb 81       	ldd	r30, Y+3	; 0x03
     6be:	fc 81       	ldd	r31, Y+4	; 0x04
     6c0:	68 ee       	ldi	r22, 0xE8	; 232
     6c2:	73 e0       	ldi	r23, 0x03	; 3
     6c4:	e6 9f       	mul	r30, r22
     6c6:	c0 01       	movw	r24, r0
     6c8:	e7 9f       	mul	r30, r23
     6ca:	90 0d       	add	r25, r0
     6cc:	f6 9f       	mul	r31, r22
     6ce:	90 0d       	add	r25, r0
     6d0:	11 24       	eor	r1, r1
     6d2:	09 2e       	mov	r0, r25
     6d4:	00 0c       	add	r0, r0
     6d6:	aa 0b       	sbc	r26, r26
     6d8:	bb 0b       	sbc	r27, r27
     6da:	79 01       	movw	r14, r18
     6dc:	8a 01       	movw	r16, r20
     6de:	e8 1a       	sub	r14, r24
     6e0:	f9 0a       	sbc	r15, r25
     6e2:	0a 0b       	sbc	r16, r26
     6e4:	1b 0b       	sbc	r17, r27
     6e6:	d8 01       	movw	r26, r16
     6e8:	c7 01       	movw	r24, r14
     6ea:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <measuredTime>
     6ee:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <measuredTime+0x1>
     6f2:	a0 93 7a 01 	sts	0x017A, r26	; 0x80017a <measuredTime+0x2>
     6f6:	b0 93 7b 01 	sts	0x017B, r27	; 0x80017b <measuredTime+0x3>

				int milli = measuredTime;
     6fa:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <measuredTime>
     6fe:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <measuredTime+0x1>
     702:	a0 91 7a 01 	lds	r26, 0x017A	; 0x80017a <measuredTime+0x2>
     706:	b0 91 7b 01 	lds	r27, 0x017B	; 0x80017b <measuredTime+0x3>
     70a:	9e 83       	std	Y+6, r25	; 0x06
     70c:	8d 83       	std	Y+5, r24	; 0x05
				
				sprintf(buffer,"%02i:%02i.%03i",min,secs,milli);
     70e:	8e 81       	ldd	r24, Y+6	; 0x06
     710:	8f 93       	push	r24
     712:	8d 81       	ldd	r24, Y+5	; 0x05
     714:	8f 93       	push	r24
     716:	8c 81       	ldd	r24, Y+4	; 0x04
     718:	8f 93       	push	r24
     71a:	8b 81       	ldd	r24, Y+3	; 0x03
     71c:	8f 93       	push	r24
     71e:	8a 81       	ldd	r24, Y+2	; 0x02
     720:	8f 93       	push	r24
     722:	89 81       	ldd	r24, Y+1	; 0x01
     724:	8f 93       	push	r24
     726:	8a e5       	ldi	r24, 0x5A	; 90
     728:	91 e0       	ldi	r25, 0x01	; 1
     72a:	89 2f       	mov	r24, r25
     72c:	8f 93       	push	r24
     72e:	8a e5       	ldi	r24, 0x5A	; 90
     730:	91 e0       	ldi	r25, 0x01	; 1
     732:	8f 93       	push	r24
     734:	ce 01       	movw	r24, r28
     736:	07 96       	adiw	r24, 0x07	; 7
     738:	29 2f       	mov	r18, r25
     73a:	2f 93       	push	r18
     73c:	8f 93       	push	r24
     73e:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <sprintf>
     742:	0d b7       	in	r16, 0x3d	; 61
     744:	1e b7       	in	r17, 0x3e	; 62
     746:	06 5f       	subi	r16, 0xF6	; 246
     748:	1f 4f       	sbci	r17, 0xFF	; 255
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	f8 94       	cli
     74e:	de bf       	out	0x3e, r29	; 62
     750:	0f be       	out	0x3f, r0	; 63
     752:	cd bf       	out	0x3d, r28	; 61
				LCD_print_String(buffer);
     754:	ce 01       	movw	r24, r28
     756:	07 96       	adiw	r24, 0x07	; 7
     758:	0e 94 2c 06 	call	0xc58	; 0xc58 <LCD_print_String>
				
				nextState = waitForResetGlobal;
     75c:	84 e0       	ldi	r24, 0x04	; 4
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <__data_end+0x1>
     764:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <__data_end>
				
			break;
     768:	22 c0       	rjmp	.+68     	; 0x7ae <__LOCK_REGION_LENGTH__+0x3ae>
			/************************************************************************/
			/* After a successful measurement the reset button                      */
			/* has to be pressed to start a new measurement							*/
			/************************************************************************/
			case waitForResetGlobal:
			while((BUTTON1_READ & (1<<BUTTON1_MASK))!=(1<<BUTTON1_MASK)){}
     76a:	00 00       	nop
     76c:	89 e2       	ldi	r24, 0x29	; 41
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	fc 01       	movw	r30, r24
     772:	80 81       	ld	r24, Z
     774:	88 2f       	mov	r24, r24
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	80 71       	andi	r24, 0x10	; 16
     77a:	99 27       	eor	r25, r25
     77c:	89 2b       	or	r24, r25
     77e:	b1 f3       	breq	.-20     	; 0x76c <__LOCK_REGION_LENGTH__+0x36c>
			if((BUTTON1_READ & (1<<BUTTON1_MASK))==(1<<BUTTON1_MASK)){
     780:	89 e2       	ldi	r24, 0x29	; 41
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	fc 01       	movw	r30, r24
     786:	80 81       	ld	r24, Z
     788:	88 2f       	mov	r24, r24
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	80 71       	andi	r24, 0x10	; 16
     78e:	99 27       	eor	r25, r25
     790:	89 2b       	or	r24, r25
     792:	61 f0       	breq	.+24     	; 0x7ac <__LOCK_REGION_LENGTH__+0x3ac>
				nextState = initSensor1;
     794:	86 e0       	ldi	r24, 0x06	; 6
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <__data_end+0x1>
     79c:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <__data_end>
			}
			
			break;
     7a0:	00 00       	nop
     7a2:	04 c0       	rjmp	.+8      	; 0x7ac <__LOCK_REGION_LENGTH__+0x3ac>
			case waitForErrorReset:
				while((BUTTON1_READ & (1<<BUTTON1_MASK))!=(1<<BUTTON1_MASK)){}
				if((BUTTON1_READ & (1<<BUTTON1_MASK))==(1<<BUTTON1_MASK)){
					nextState = checkSensor1;
				}
			break;
     7a4:	00 00       	nop
     7a6:	9c cc       	rjmp	.-1736   	; 0xe0 <main+0x24>
					setLS2Interrupt(FALSE);
					sensor2state = FALSE;
					sensor1state = FALSE;
					nextState = printTime;
				}		
			break;
     7a8:	00 00       	nop
     7aa:	9a cc       	rjmp	.-1740   	; 0xe0 <main+0x24>
			while((BUTTON1_READ & (1<<BUTTON1_MASK))!=(1<<BUTTON1_MASK)){}
			if((BUTTON1_READ & (1<<BUTTON1_MASK))==(1<<BUTTON1_MASK)){
				nextState = initSensor1;
			}
			
			break;
     7ac:	00 00       	nop
		}
    }
     7ae:	98 cc       	rjmp	.-1744   	; 0xe0 <main+0x24>

000007b0 <__vector_14>:
}

//Timer 0 compare A interrupt
ISR(TIMER0_COMPA_vect)
{
     7b0:	1f 92       	push	r1
     7b2:	0f 92       	push	r0
     7b4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     7b8:	0f 92       	push	r0
     7ba:	11 24       	eor	r1, r1
     7bc:	af 92       	push	r10
     7be:	bf 92       	push	r11
     7c0:	cf 92       	push	r12
     7c2:	df 92       	push	r13
     7c4:	ef 92       	push	r14
     7c6:	ff 92       	push	r15
     7c8:	0f 93       	push	r16
     7ca:	1f 93       	push	r17
     7cc:	2f 93       	push	r18
     7ce:	3f 93       	push	r19
     7d0:	4f 93       	push	r20
     7d2:	5f 93       	push	r21
     7d4:	6f 93       	push	r22
     7d6:	7f 93       	push	r23
     7d8:	8f 93       	push	r24
     7da:	9f 93       	push	r25
     7dc:	af 93       	push	r26
     7de:	bf 93       	push	r27
     7e0:	ef 93       	push	r30
     7e2:	ff 93       	push	r31
     7e4:	cf 93       	push	r28
     7e6:	df 93       	push	r29
     7e8:	cd b7       	in	r28, 0x3d	; 61
     7ea:	de b7       	in	r29, 0x3e	; 62
	runningTimeMs++;
     7ec:	a0 90 6c 01 	lds	r10, 0x016C	; 0x80016c <runningTimeMs>
     7f0:	b0 90 6d 01 	lds	r11, 0x016D	; 0x80016d <runningTimeMs+0x1>
     7f4:	c0 90 6e 01 	lds	r12, 0x016E	; 0x80016e <runningTimeMs+0x2>
     7f8:	d0 90 6f 01 	lds	r13, 0x016F	; 0x80016f <runningTimeMs+0x3>
     7fc:	e0 90 70 01 	lds	r14, 0x0170	; 0x800170 <runningTimeMs+0x4>
     800:	f0 90 71 01 	lds	r15, 0x0171	; 0x800171 <runningTimeMs+0x5>
     804:	00 91 72 01 	lds	r16, 0x0172	; 0x800172 <runningTimeMs+0x6>
     808:	10 91 73 01 	lds	r17, 0x0173	; 0x800173 <runningTimeMs+0x7>
     80c:	2a 2d       	mov	r18, r10
     80e:	3b 2d       	mov	r19, r11
     810:	4c 2d       	mov	r20, r12
     812:	5d 2d       	mov	r21, r13
     814:	6e 2d       	mov	r22, r14
     816:	7f 2d       	mov	r23, r15
     818:	80 2f       	mov	r24, r16
     81a:	91 2f       	mov	r25, r17
     81c:	a1 e0       	ldi	r26, 0x01	; 1
     81e:	0e 94 90 06 	call	0xd20	; 0xd20 <__adddi3_s8>
     822:	a2 2e       	mov	r10, r18
     824:	b3 2e       	mov	r11, r19
     826:	c4 2e       	mov	r12, r20
     828:	d5 2e       	mov	r13, r21
     82a:	e6 2e       	mov	r14, r22
     82c:	f7 2e       	mov	r15, r23
     82e:	08 2f       	mov	r16, r24
     830:	19 2f       	mov	r17, r25
     832:	a0 92 6c 01 	sts	0x016C, r10	; 0x80016c <runningTimeMs>
     836:	b0 92 6d 01 	sts	0x016D, r11	; 0x80016d <runningTimeMs+0x1>
     83a:	c0 92 6e 01 	sts	0x016E, r12	; 0x80016e <runningTimeMs+0x2>
     83e:	d0 92 6f 01 	sts	0x016F, r13	; 0x80016f <runningTimeMs+0x3>
     842:	e0 92 70 01 	sts	0x0170, r14	; 0x800170 <runningTimeMs+0x4>
     846:	f0 92 71 01 	sts	0x0171, r15	; 0x800171 <runningTimeMs+0x5>
     84a:	00 93 72 01 	sts	0x0172, r16	; 0x800172 <runningTimeMs+0x6>
     84e:	10 93 73 01 	sts	0x0173, r17	; 0x800173 <runningTimeMs+0x7>
	if((BUTTON1_READ & (1<<BUTTON1_MASK))==(1<<BUTTON1_MASK))
     852:	89 e2       	ldi	r24, 0x29	; 41
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	fc 01       	movw	r30, r24
     858:	80 81       	ld	r24, Z
     85a:	88 2f       	mov	r24, r24
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	80 71       	andi	r24, 0x10	; 16
     860:	99 27       	eor	r25, r25
     862:	89 2b       	or	r24, r25
     864:	a1 f0       	breq	.+40     	; 0x88e <__vector_14+0xde>
	{
		buttonPressTimeMs++;
     866:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <buttonPressTimeMs>
     86a:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <buttonPressTimeMs+0x1>
     86e:	a0 91 7e 01 	lds	r26, 0x017E	; 0x80017e <buttonPressTimeMs+0x2>
     872:	b0 91 7f 01 	lds	r27, 0x017F	; 0x80017f <buttonPressTimeMs+0x3>
     876:	01 96       	adiw	r24, 0x01	; 1
     878:	a1 1d       	adc	r26, r1
     87a:	b1 1d       	adc	r27, r1
     87c:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <buttonPressTimeMs>
     880:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <buttonPressTimeMs+0x1>
     884:	a0 93 7e 01 	sts	0x017E, r26	; 0x80017e <buttonPressTimeMs+0x2>
     888:	b0 93 7f 01 	sts	0x017F, r27	; 0x80017f <buttonPressTimeMs+0x3>
	}
	else
	{
		buttonPressTimeMs = 0;
	}
}
     88c:	08 c0       	rjmp	.+16     	; 0x89e <__vector_14+0xee>
	{
		buttonPressTimeMs++;
	}
	else
	{
		buttonPressTimeMs = 0;
     88e:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <buttonPressTimeMs>
     892:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <buttonPressTimeMs+0x1>
     896:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <buttonPressTimeMs+0x2>
     89a:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <buttonPressTimeMs+0x3>
	}
}
     89e:	00 00       	nop
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	ff 91       	pop	r31
     8a6:	ef 91       	pop	r30
     8a8:	bf 91       	pop	r27
     8aa:	af 91       	pop	r26
     8ac:	9f 91       	pop	r25
     8ae:	8f 91       	pop	r24
     8b0:	7f 91       	pop	r23
     8b2:	6f 91       	pop	r22
     8b4:	5f 91       	pop	r21
     8b6:	4f 91       	pop	r20
     8b8:	3f 91       	pop	r19
     8ba:	2f 91       	pop	r18
     8bc:	1f 91       	pop	r17
     8be:	0f 91       	pop	r16
     8c0:	ff 90       	pop	r15
     8c2:	ef 90       	pop	r14
     8c4:	df 90       	pop	r13
     8c6:	cf 90       	pop	r12
     8c8:	bf 90       	pop	r11
     8ca:	af 90       	pop	r10
     8cc:	0f 90       	pop	r0
     8ce:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     8d2:	0f 90       	pop	r0
     8d4:	1f 90       	pop	r1
     8d6:	18 95       	reti

000008d8 <__vector_1>:

//Lichtschranke 1 interrupt
ISR(INT0_vect)
{
     8d8:	1f 92       	push	r1
     8da:	0f 92       	push	r0
     8dc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     8e0:	0f 92       	push	r0
     8e2:	11 24       	eor	r1, r1
     8e4:	8f 93       	push	r24
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	cd b7       	in	r28, 0x3d	; 61
     8ec:	de b7       	in	r29, 0x3e	; 62
	sensor1state = TRUE;
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <sensor1state>
}
     8f4:	00 00       	nop
     8f6:	df 91       	pop	r29
     8f8:	cf 91       	pop	r28
     8fa:	8f 91       	pop	r24
     8fc:	0f 90       	pop	r0
     8fe:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     902:	0f 90       	pop	r0
     904:	1f 90       	pop	r1
     906:	18 95       	reti

00000908 <__vector_2>:

//Lichtschranke 2 interrupt
ISR(INT1_vect)
{
     908:	1f 92       	push	r1
     90a:	0f 92       	push	r0
     90c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     910:	0f 92       	push	r0
     912:	11 24       	eor	r1, r1
     914:	8f 93       	push	r24
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
     91a:	cd b7       	in	r28, 0x3d	; 61
     91c:	de b7       	in	r29, 0x3e	; 62
	sensor2state = TRUE;
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <sensor2state>
}
     924:	00 00       	nop
     926:	df 91       	pop	r29
     928:	cf 91       	pop	r28
     92a:	8f 91       	pop	r24
     92c:	0f 90       	pop	r0
     92e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     932:	0f 90       	pop	r0
     934:	1f 90       	pop	r1
     936:	18 95       	reti

00000938 <setupTimer0>:
/* Set timer 0 to CTC mode												*/
/* Set timer 0 prescaler to  64											*/
/* Set compare value to 249 (250 values) -> 1ms interrupt				*/
/************************************************************************/
 void setupTimer0()
 {
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	cd b7       	in	r28, 0x3d	; 61
     93e:	de b7       	in	r29, 0x3e	; 62
	 //Set timer 0 to CTC mode
	 TCCR0A |= (1<<WGM00);
     940:	84 e4       	ldi	r24, 0x44	; 68
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	24 e4       	ldi	r18, 0x44	; 68
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	f9 01       	movw	r30, r18
     94a:	20 81       	ld	r18, Z
     94c:	21 60       	ori	r18, 0x01	; 1
     94e:	fc 01       	movw	r30, r24
     950:	20 83       	st	Z, r18
	 TCCR0A |= (1<<WGM01);
     952:	84 e4       	ldi	r24, 0x44	; 68
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	24 e4       	ldi	r18, 0x44	; 68
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	f9 01       	movw	r30, r18
     95c:	20 81       	ld	r18, Z
     95e:	22 60       	ori	r18, 0x02	; 2
     960:	fc 01       	movw	r30, r24
     962:	20 83       	st	Z, r18
	 TCCR0B &= ~(1<<WGM02);
     964:	85 e4       	ldi	r24, 0x45	; 69
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	25 e4       	ldi	r18, 0x45	; 69
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	f9 01       	movw	r30, r18
     96e:	20 81       	ld	r18, Z
     970:	27 7f       	andi	r18, 0xF7	; 247
     972:	fc 01       	movw	r30, r24
     974:	20 83       	st	Z, r18

	 //preload value
	 TCNT0 = 0;
     976:	86 e4       	ldi	r24, 0x46	; 70
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	fc 01       	movw	r30, r24
     97c:	10 82       	st	Z, r1

	 //Set prescaler (64 prescaler) -> timer start
	 TCCR0B &= ~(1<<CS02);
     97e:	85 e4       	ldi	r24, 0x45	; 69
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	25 e4       	ldi	r18, 0x45	; 69
     984:	30 e0       	ldi	r19, 0x00	; 0
     986:	f9 01       	movw	r30, r18
     988:	20 81       	ld	r18, Z
     98a:	2b 7f       	andi	r18, 0xFB	; 251
     98c:	fc 01       	movw	r30, r24
     98e:	20 83       	st	Z, r18
	 TCCR0B |= (1<<CS00);
     990:	85 e4       	ldi	r24, 0x45	; 69
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	25 e4       	ldi	r18, 0x45	; 69
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	f9 01       	movw	r30, r18
     99a:	20 81       	ld	r18, Z
     99c:	21 60       	ori	r18, 0x01	; 1
     99e:	fc 01       	movw	r30, r24
     9a0:	20 83       	st	Z, r18
	 TCCR0B |= (1<<CS01);
     9a2:	85 e4       	ldi	r24, 0x45	; 69
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	25 e4       	ldi	r18, 0x45	; 69
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	f9 01       	movw	r30, r18
     9ac:	20 81       	ld	r18, Z
     9ae:	22 60       	ori	r18, 0x02	; 2
     9b0:	fc 01       	movw	r30, r24
     9b2:	20 83       	st	Z, r18

	 //Set compare value
	 OCR0A = 249;
     9b4:	87 e4       	ldi	r24, 0x47	; 71
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	29 ef       	ldi	r18, 0xF9	; 249
     9ba:	fc 01       	movw	r30, r24
     9bc:	20 83       	st	Z, r18
	 TIMSK0 |= (1<<OCIE0A); 
     9be:	8e e6       	ldi	r24, 0x6E	; 110
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	2e e6       	ldi	r18, 0x6E	; 110
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	f9 01       	movw	r30, r18
     9c8:	20 81       	ld	r18, Z
     9ca:	22 60       	ori	r18, 0x02	; 2
     9cc:	fc 01       	movw	r30, r24
     9ce:	20 83       	st	Z, r18

 }
     9d0:	00 00       	nop
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	08 95       	ret

000009d8 <setupLichtschranke1>:
/* Setup sensor 1                                                      */
/* Set sensor 1 as an input												*/
/* Set Interrupt Sense Control to detect rising edge					*/
/************************************************************************/
 void setupLichtschranke1()
 {
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
     9dc:	cd b7       	in	r28, 0x3d	; 61
     9de:	de b7       	in	r29, 0x3e	; 62
	//Set as input
	LS1_PORT &= ~(1<<LS1_MASK);
     9e0:	8a e2       	ldi	r24, 0x2A	; 42
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	2a e2       	ldi	r18, 0x2A	; 42
     9e6:	30 e0       	ldi	r19, 0x00	; 0
     9e8:	f9 01       	movw	r30, r18
     9ea:	20 81       	ld	r18, Z
     9ec:	2b 7f       	andi	r18, 0xFB	; 251
     9ee:	fc 01       	movw	r30, r24
     9f0:	20 83       	st	Z, r18

	//Set Interrupt Sense Control(ISC) to detect rising edge on INT0
	EICRA |= (1<<ISC01);
     9f2:	89 e6       	ldi	r24, 0x69	; 105
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	29 e6       	ldi	r18, 0x69	; 105
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	f9 01       	movw	r30, r18
     9fc:	20 81       	ld	r18, Z
     9fe:	22 60       	ori	r18, 0x02	; 2
     a00:	fc 01       	movw	r30, r24
     a02:	20 83       	st	Z, r18
	EICRA |= (1<<ISC00);
     a04:	89 e6       	ldi	r24, 0x69	; 105
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	29 e6       	ldi	r18, 0x69	; 105
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	f9 01       	movw	r30, r18
     a0e:	20 81       	ld	r18, Z
     a10:	21 60       	ori	r18, 0x01	; 1
     a12:	fc 01       	movw	r30, r24
     a14:	20 83       	st	Z, r18
 }
     a16:	00 00       	nop
     a18:	df 91       	pop	r29
     a1a:	cf 91       	pop	r28
     a1c:	08 95       	ret

00000a1e <setLS1Interrupt>:
 
 /************************************************************************/
 /* Function to change the sensor 1 interrupt state                      */
 /************************************************************************/
 void setLS1Interrupt(unsigned char state)
 {
     a1e:	cf 93       	push	r28
     a20:	df 93       	push	r29
     a22:	1f 92       	push	r1
     a24:	cd b7       	in	r28, 0x3d	; 61
     a26:	de b7       	in	r29, 0x3e	; 62
     a28:	89 83       	std	Y+1, r24	; 0x01
	if(state)
     a2a:	89 81       	ldd	r24, Y+1	; 0x01
     a2c:	88 23       	and	r24, r24
     a2e:	51 f0       	breq	.+20     	; 0xa44 <setLS1Interrupt+0x26>
	{
		//Activate INT0
		EIMSK |= (1<<INT0);
     a30:	8d e3       	ldi	r24, 0x3D	; 61
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	2d e3       	ldi	r18, 0x3D	; 61
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	f9 01       	movw	r30, r18
     a3a:	20 81       	ld	r18, Z
     a3c:	21 60       	ori	r18, 0x01	; 1
     a3e:	fc 01       	movw	r30, r24
     a40:	20 83       	st	Z, r18
	else
	{
		//Disable INT0
		EIMSK &= ~(1<<INT0);
	}
 }
     a42:	09 c0       	rjmp	.+18     	; 0xa56 <setLS1Interrupt+0x38>
		EIMSK |= (1<<INT0);
	}
	else
	{
		//Disable INT0
		EIMSK &= ~(1<<INT0);
     a44:	8d e3       	ldi	r24, 0x3D	; 61
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	2d e3       	ldi	r18, 0x3D	; 61
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	f9 01       	movw	r30, r18
     a4e:	20 81       	ld	r18, Z
     a50:	2e 7f       	andi	r18, 0xFE	; 254
     a52:	fc 01       	movw	r30, r24
     a54:	20 83       	st	Z, r18
	}
 }
     a56:	00 00       	nop
     a58:	0f 90       	pop	r0
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	08 95       	ret

00000a60 <setupLichtschranke2>:
/* Setup sensor 2                                                       */
/* Set sensor 2 as an input												*/
/* Set Interrupt Sense Control to detect rising edge					*/
/************************************************************************/
 void setupLichtschranke2()
 {
     a60:	cf 93       	push	r28
     a62:	df 93       	push	r29
     a64:	cd b7       	in	r28, 0x3d	; 61
     a66:	de b7       	in	r29, 0x3e	; 62
	//Set as input
	LS2_PORT &= ~(1<<LS2_MASK);
     a68:	8a e2       	ldi	r24, 0x2A	; 42
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	2a e2       	ldi	r18, 0x2A	; 42
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	f9 01       	movw	r30, r18
     a72:	20 81       	ld	r18, Z
     a74:	27 7f       	andi	r18, 0xF7	; 247
     a76:	fc 01       	movw	r30, r24
     a78:	20 83       	st	Z, r18

	//Set Interrupt Sense Control(ISC) to detect rising edge on INT1
	EICRA |= (1<<ISC11);
     a7a:	89 e6       	ldi	r24, 0x69	; 105
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	29 e6       	ldi	r18, 0x69	; 105
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	f9 01       	movw	r30, r18
     a84:	20 81       	ld	r18, Z
     a86:	28 60       	ori	r18, 0x08	; 8
     a88:	fc 01       	movw	r30, r24
     a8a:	20 83       	st	Z, r18
	EICRA |= (1<<ISC10);
     a8c:	89 e6       	ldi	r24, 0x69	; 105
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	29 e6       	ldi	r18, 0x69	; 105
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	f9 01       	movw	r30, r18
     a96:	20 81       	ld	r18, Z
     a98:	24 60       	ori	r18, 0x04	; 4
     a9a:	fc 01       	movw	r30, r24
     a9c:	20 83       	st	Z, r18
 }
     a9e:	00 00       	nop
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	08 95       	ret

00000aa6 <setLS2Interrupt>:

/************************************************************************/
/* Function to change the sensor 2 interrupt state                      */
/************************************************************************/
 void setLS2Interrupt(unsigned char state)
 {
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	1f 92       	push	r1
     aac:	cd b7       	in	r28, 0x3d	; 61
     aae:	de b7       	in	r29, 0x3e	; 62
     ab0:	89 83       	std	Y+1, r24	; 0x01
	if(state == 1)
     ab2:	89 81       	ldd	r24, Y+1	; 0x01
     ab4:	81 30       	cpi	r24, 0x01	; 1
     ab6:	51 f4       	brne	.+20     	; 0xacc <setLS2Interrupt+0x26>
	{
		//Activate INT1
		EIMSK |= (1<<INT1);
     ab8:	8d e3       	ldi	r24, 0x3D	; 61
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	2d e3       	ldi	r18, 0x3D	; 61
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	f9 01       	movw	r30, r18
     ac2:	20 81       	ld	r18, Z
     ac4:	22 60       	ori	r18, 0x02	; 2
     ac6:	fc 01       	movw	r30, r24
     ac8:	20 83       	st	Z, r18
	else
	{
		//Disable INT1
		EIMSK &= ~(1<<INT1);
	}
 }
     aca:	09 c0       	rjmp	.+18     	; 0xade <setLS2Interrupt+0x38>
		EIMSK |= (1<<INT1);
	}
	else
	{
		//Disable INT1
		EIMSK &= ~(1<<INT1);
     acc:	8d e3       	ldi	r24, 0x3D	; 61
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	2d e3       	ldi	r18, 0x3D	; 61
     ad2:	30 e0       	ldi	r19, 0x00	; 0
     ad4:	f9 01       	movw	r30, r18
     ad6:	20 81       	ld	r18, Z
     ad8:	2d 7f       	andi	r18, 0xFD	; 253
     ada:	fc 01       	movw	r30, r24
     adc:	20 83       	st	Z, r18
	}
 }
     ade:	00 00       	nop
     ae0:	0f 90       	pop	r0
     ae2:	df 91       	pop	r29
     ae4:	cf 91       	pop	r28
     ae6:	08 95       	ret

00000ae8 <setupButton>:

/************************************************************************/
/* Set reset Button as input                                            */
/************************************************************************/
void setupButton()
{
     ae8:	cf 93       	push	r28
     aea:	df 93       	push	r29
     aec:	cd b7       	in	r28, 0x3d	; 61
     aee:	de b7       	in	r29, 0x3e	; 62
	BUTTON1_PORT &= ~(1<<BUTTON1_MASK);
     af0:	8a e2       	ldi	r24, 0x2A	; 42
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	2a e2       	ldi	r18, 0x2A	; 42
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	f9 01       	movw	r30, r18
     afa:	20 81       	ld	r18, Z
     afc:	2f 7e       	andi	r18, 0xEF	; 239
     afe:	fc 01       	movw	r30, r24
     b00:	20 83       	st	Z, r18
}
     b02:	00 00       	nop
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	08 95       	ret

00000b0a <set_CommandLine_as_OUTPUT>:
     b0a:	3a 9a       	sbi	0x07, 2	; 7
     b0c:	39 9a       	sbi	0x07, 1	; 7
     b0e:	38 9a       	sbi	0x07, 0	; 7
     b10:	2f ef       	ldi	r18, 0xFF	; 255
     b12:	89 ef       	ldi	r24, 0xF9	; 249
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	21 50       	subi	r18, 0x01	; 1
     b18:	80 40       	sbci	r24, 0x00	; 0
     b1a:	90 40       	sbci	r25, 0x00	; 0
     b1c:	e1 f7       	brne	.-8      	; 0xb16 <set_CommandLine_as_OUTPUT+0xc>
     b1e:	00 c0       	rjmp	.+0      	; 0xb20 <set_CommandLine_as_OUTPUT+0x16>
     b20:	00 00       	nop
     b22:	08 95       	ret

00000b24 <set_DataLine_as_INPUT>:
     b24:	55 98       	cbi	0x0a, 5	; 10
     b26:	56 98       	cbi	0x0a, 6	; 10
     b28:	57 98       	cbi	0x0a, 7	; 10
     b2a:	20 98       	cbi	0x04, 0	; 4
     b2c:	21 98       	cbi	0x04, 1	; 4
     b2e:	22 98       	cbi	0x04, 2	; 4
     b30:	23 98       	cbi	0x04, 3	; 4
     b32:	24 98       	cbi	0x04, 4	; 4
     b34:	08 95       	ret

00000b36 <set_DataLine_as_OUTPUT>:
     b36:	55 9a       	sbi	0x0a, 5	; 10
     b38:	56 9a       	sbi	0x0a, 6	; 10
     b3a:	57 9a       	sbi	0x0a, 7	; 10
     b3c:	20 9a       	sbi	0x04, 0	; 4
     b3e:	21 9a       	sbi	0x04, 1	; 4
     b40:	22 9a       	sbi	0x04, 2	; 4
     b42:	23 9a       	sbi	0x04, 3	; 4
     b44:	24 9a       	sbi	0x04, 4	; 4
     b46:	08 95       	ret

00000b48 <get_Byte_Physically>:
     b48:	89 b1       	in	r24, 0x09	; 9
     b4a:	99 b1       	in	r25, 0x09	; 9
     b4c:	99 b1       	in	r25, 0x09	; 9
     b4e:	93 b1       	in	r25, 0x03	; 3
     b50:	93 b1       	in	r25, 0x03	; 3
     b52:	93 b1       	in	r25, 0x03	; 3
     b54:	93 b1       	in	r25, 0x03	; 3
     b56:	93 b1       	in	r25, 0x03	; 3
     b58:	85 fb       	bst	r24, 5
     b5a:	88 27       	eor	r24, r24
     b5c:	80 f9       	bld	r24, 0
     b5e:	08 95       	ret

00000b60 <set_Byte_Physically>:
     b60:	80 ff       	sbrs	r24, 0
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <set_Byte_Physically+0x8>
     b64:	5d 9a       	sbi	0x0b, 5	; 11
     b66:	01 c0       	rjmp	.+2      	; 0xb6a <set_Byte_Physically+0xa>
     b68:	5d 98       	cbi	0x0b, 5	; 11
     b6a:	81 ff       	sbrs	r24, 1
     b6c:	02 c0       	rjmp	.+4      	; 0xb72 <set_Byte_Physically+0x12>
     b6e:	5e 9a       	sbi	0x0b, 6	; 11
     b70:	01 c0       	rjmp	.+2      	; 0xb74 <set_Byte_Physically+0x14>
     b72:	5e 98       	cbi	0x0b, 6	; 11
     b74:	82 ff       	sbrs	r24, 2
     b76:	02 c0       	rjmp	.+4      	; 0xb7c <set_Byte_Physically+0x1c>
     b78:	5f 9a       	sbi	0x0b, 7	; 11
     b7a:	01 c0       	rjmp	.+2      	; 0xb7e <set_Byte_Physically+0x1e>
     b7c:	5f 98       	cbi	0x0b, 7	; 11
     b7e:	83 ff       	sbrs	r24, 3
     b80:	02 c0       	rjmp	.+4      	; 0xb86 <set_Byte_Physically+0x26>
     b82:	28 9a       	sbi	0x05, 0	; 5
     b84:	01 c0       	rjmp	.+2      	; 0xb88 <set_Byte_Physically+0x28>
     b86:	28 98       	cbi	0x05, 0	; 5
     b88:	84 ff       	sbrs	r24, 4
     b8a:	02 c0       	rjmp	.+4      	; 0xb90 <set_Byte_Physically+0x30>
     b8c:	29 9a       	sbi	0x05, 1	; 5
     b8e:	01 c0       	rjmp	.+2      	; 0xb92 <set_Byte_Physically+0x32>
     b90:	29 98       	cbi	0x05, 1	; 5
     b92:	85 ff       	sbrs	r24, 5
     b94:	02 c0       	rjmp	.+4      	; 0xb9a <set_Byte_Physically+0x3a>
     b96:	2a 9a       	sbi	0x05, 2	; 5
     b98:	01 c0       	rjmp	.+2      	; 0xb9c <set_Byte_Physically+0x3c>
     b9a:	2a 98       	cbi	0x05, 2	; 5
     b9c:	86 ff       	sbrs	r24, 6
     b9e:	02 c0       	rjmp	.+4      	; 0xba4 <set_Byte_Physically+0x44>
     ba0:	2b 9a       	sbi	0x05, 3	; 5
     ba2:	01 c0       	rjmp	.+2      	; 0xba6 <set_Byte_Physically+0x46>
     ba4:	2b 98       	cbi	0x05, 3	; 5
     ba6:	88 23       	and	r24, r24
     ba8:	14 f4       	brge	.+4      	; 0xbae <set_Byte_Physically+0x4e>
     baa:	2c 9a       	sbi	0x05, 4	; 5
     bac:	08 95       	ret
     bae:	2c 98       	cbi	0x05, 4	; 5
     bb0:	08 95       	ret

00000bb2 <Apply_Settings>:
     bb2:	42 9a       	sbi	0x08, 2	; 8
     bb4:	8f e3       	ldi	r24, 0x3F	; 63
     bb6:	9c e9       	ldi	r25, 0x9C	; 156
     bb8:	01 97       	sbiw	r24, 0x01	; 1
     bba:	f1 f7       	brne	.-4      	; 0xbb8 <Apply_Settings+0x6>
     bbc:	00 c0       	rjmp	.+0      	; 0xbbe <Apply_Settings+0xc>
     bbe:	00 00       	nop
     bc0:	42 98       	cbi	0x08, 2	; 8
     bc2:	08 95       	ret

00000bc4 <Check_LCD_Readiness>:
     bc4:	0e 94 92 05 	call	0xb24	; 0xb24 <set_DataLine_as_INPUT>
     bc8:	41 9a       	sbi	0x08, 1	; 8
     bca:	40 98       	cbi	0x08, 0	; 8
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <Check_LCD_Readiness+0xe>
     bce:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <Apply_Settings>
     bd2:	0e 94 a4 05 	call	0xb48	; 0xb48 <get_Byte_Physically>
     bd6:	88 23       	and	r24, r24
     bd8:	d4 f3       	brlt	.-12     	; 0xbce <Check_LCD_Readiness+0xa>
     bda:	0e 94 9b 05 	call	0xb36	; 0xb36 <set_DataLine_as_OUTPUT>
     bde:	08 95       	ret

00000be0 <Send_A_Command>:
     be0:	cf 93       	push	r28
     be2:	c8 2f       	mov	r28, r24
     be4:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <Check_LCD_Readiness>
     be8:	8c 2f       	mov	r24, r28
     bea:	0e 94 b0 05 	call	0xb60	; 0xb60 <set_Byte_Physically>
     bee:	41 98       	cbi	0x08, 1	; 8
     bf0:	40 98       	cbi	0x08, 0	; 8
     bf2:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <Apply_Settings>
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	0e 94 b0 05 	call	0xb60	; 0xb60 <set_Byte_Physically>
     bfc:	cf 91       	pop	r28
     bfe:	08 95       	ret

00000c00 <Send_A_Character>:
     c00:	cf 93       	push	r28
     c02:	c8 2f       	mov	r28, r24
     c04:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <Check_LCD_Readiness>
     c08:	8c 2f       	mov	r24, r28
     c0a:	0e 94 b0 05 	call	0xb60	; 0xb60 <set_Byte_Physically>
     c0e:	41 98       	cbi	0x08, 1	; 8
     c10:	40 9a       	sbi	0x08, 0	; 8
     c12:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <Apply_Settings>
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	0e 94 b0 05 	call	0xb60	; 0xb60 <set_Byte_Physically>
     c1c:	cf 91       	pop	r28
     c1e:	08 95       	ret

00000c20 <set_Curser_position>:
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
     c24:	00 d0       	rcall	.+0      	; 0xc26 <set_Curser_position+0x6>
     c26:	00 d0       	rcall	.+0      	; 0xc28 <set_Curser_position+0x8>
     c28:	cd b7       	in	r28, 0x3d	; 61
     c2a:	de b7       	in	r29, 0x3e	; 62
     c2c:	19 82       	std	Y+1, r1	; 0x01
     c2e:	90 e4       	ldi	r25, 0x40	; 64
     c30:	9a 83       	std	Y+2, r25	; 0x02
     c32:	94 e1       	ldi	r25, 0x14	; 20
     c34:	9b 83       	std	Y+3, r25	; 0x03
     c36:	94 e5       	ldi	r25, 0x54	; 84
     c38:	9c 83       	std	Y+4, r25	; 0x04
     c3a:	fe 01       	movw	r30, r28
     c3c:	e6 0f       	add	r30, r22
     c3e:	f1 1d       	adc	r31, r1
     c40:	80 58       	subi	r24, 0x80	; 128
     c42:	91 81       	ldd	r25, Z+1	; 0x01
     c44:	89 0f       	add	r24, r25
     c46:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <Send_A_Command>
     c4a:	0f 90       	pop	r0
     c4c:	0f 90       	pop	r0
     c4e:	0f 90       	pop	r0
     c50:	0f 90       	pop	r0
     c52:	df 91       	pop	r29
     c54:	cf 91       	pop	r28
     c56:	08 95       	ret

00000c58 <LCD_print_String>:
     c58:	cf 93       	push	r28
     c5a:	df 93       	push	r29
     c5c:	ec 01       	movw	r28, r24
     c5e:	88 81       	ld	r24, Y
     c60:	88 23       	and	r24, r24
     c62:	31 f0       	breq	.+12     	; 0xc70 <LCD_print_String+0x18>
     c64:	21 96       	adiw	r28, 0x01	; 1
     c66:	0e 94 00 06 	call	0xc00	; 0xc00 <Send_A_Character>
     c6a:	89 91       	ld	r24, Y+
     c6c:	81 11       	cpse	r24, r1
     c6e:	fb cf       	rjmp	.-10     	; 0xc66 <LCD_print_String+0xe>
     c70:	df 91       	pop	r29
     c72:	cf 91       	pop	r28
     c74:	08 95       	ret

00000c76 <LCD_init>:
     c76:	0e 94 85 05 	call	0xb0a	; 0xb0a <set_CommandLine_as_OUTPUT>
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <Send_A_Command>
     c80:	8f e1       	ldi	r24, 0x1F	; 31
     c82:	9e e4       	ldi	r25, 0x4E	; 78
     c84:	01 97       	sbiw	r24, 0x01	; 1
     c86:	f1 f7       	brne	.-4      	; 0xc84 <LCD_init+0xe>
     c88:	00 c0       	rjmp	.+0      	; 0xc8a <LCD_init+0x14>
     c8a:	00 00       	nop
     c8c:	88 e3       	ldi	r24, 0x38	; 56
     c8e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <Send_A_Command>
     c92:	8f e1       	ldi	r24, 0x1F	; 31
     c94:	9e e4       	ldi	r25, 0x4E	; 78
     c96:	01 97       	sbiw	r24, 0x01	; 1
     c98:	f1 f7       	brne	.-4      	; 0xc96 <LCD_init+0x20>
     c9a:	00 c0       	rjmp	.+0      	; 0xc9c <LCD_init+0x26>
     c9c:	00 00       	nop
     c9e:	8c e0       	ldi	r24, 0x0C	; 12
     ca0:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <Send_A_Command>
     ca4:	8f e1       	ldi	r24, 0x1F	; 31
     ca6:	9e e4       	ldi	r25, 0x4E	; 78
     ca8:	01 97       	sbiw	r24, 0x01	; 1
     caa:	f1 f7       	brne	.-4      	; 0xca8 <LCD_init+0x32>
     cac:	00 c0       	rjmp	.+0      	; 0xcae <LCD_init+0x38>
     cae:	00 00       	nop
     cb0:	08 95       	ret

00000cb2 <LCD_clear_screan>:
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <Send_A_Command>
     cb8:	8f e1       	ldi	r24, 0x1F	; 31
     cba:	9e e4       	ldi	r25, 0x4E	; 78
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	f1 f7       	brne	.-4      	; 0xcbc <LCD_clear_screan+0xa>
     cc0:	00 c0       	rjmp	.+0      	; 0xcc2 <LCD_clear_screan+0x10>
     cc2:	00 00       	nop
     cc4:	08 95       	ret

00000cc6 <__divmodsi4>:
     cc6:	05 2e       	mov	r0, r21
     cc8:	97 fb       	bst	r25, 7
     cca:	1e f4       	brtc	.+6      	; 0xcd2 <__divmodsi4+0xc>
     ccc:	00 94       	com	r0
     cce:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <__negsi2>
     cd2:	57 fd       	sbrc	r21, 7
     cd4:	07 d0       	rcall	.+14     	; 0xce4 <__divmodsi4_neg2>
     cd6:	0e 94 9c 06 	call	0xd38	; 0xd38 <__udivmodsi4>
     cda:	07 fc       	sbrc	r0, 7
     cdc:	03 d0       	rcall	.+6      	; 0xce4 <__divmodsi4_neg2>
     cde:	4e f4       	brtc	.+18     	; 0xcf2 <__divmodsi4_exit>
     ce0:	0c 94 7a 06 	jmp	0xcf4	; 0xcf4 <__negsi2>

00000ce4 <__divmodsi4_neg2>:
     ce4:	50 95       	com	r21
     ce6:	40 95       	com	r20
     ce8:	30 95       	com	r19
     cea:	21 95       	neg	r18
     cec:	3f 4f       	sbci	r19, 0xFF	; 255
     cee:	4f 4f       	sbci	r20, 0xFF	; 255
     cf0:	5f 4f       	sbci	r21, 0xFF	; 255

00000cf2 <__divmodsi4_exit>:
     cf2:	08 95       	ret

00000cf4 <__negsi2>:
     cf4:	90 95       	com	r25
     cf6:	80 95       	com	r24
     cf8:	70 95       	com	r23
     cfa:	61 95       	neg	r22
     cfc:	7f 4f       	sbci	r23, 0xFF	; 255
     cfe:	8f 4f       	sbci	r24, 0xFF	; 255
     d00:	9f 4f       	sbci	r25, 0xFF	; 255
     d02:	08 95       	ret

00000d04 <__tablejump2__>:
     d04:	ee 0f       	add	r30, r30
     d06:	ff 1f       	adc	r31, r31
     d08:	05 90       	lpm	r0, Z+
     d0a:	f4 91       	lpm	r31, Z
     d0c:	e0 2d       	mov	r30, r0
     d0e:	09 94       	ijmp

00000d10 <__mulshisi3>:
     d10:	b7 ff       	sbrs	r27, 7
     d12:	0c 94 be 06 	jmp	0xd7c	; 0xd7c <__muluhisi3>

00000d16 <__mulohisi3>:
     d16:	0e 94 be 06 	call	0xd7c	; 0xd7c <__muluhisi3>
     d1a:	82 1b       	sub	r24, r18
     d1c:	93 0b       	sbc	r25, r19
     d1e:	08 95       	ret

00000d20 <__adddi3_s8>:
     d20:	00 24       	eor	r0, r0
     d22:	a7 fd       	sbrc	r26, 7
     d24:	00 94       	com	r0
     d26:	2a 0f       	add	r18, r26
     d28:	30 1d       	adc	r19, r0
     d2a:	40 1d       	adc	r20, r0
     d2c:	50 1d       	adc	r21, r0
     d2e:	60 1d       	adc	r22, r0
     d30:	70 1d       	adc	r23, r0
     d32:	80 1d       	adc	r24, r0
     d34:	90 1d       	adc	r25, r0
     d36:	08 95       	ret

00000d38 <__udivmodsi4>:
     d38:	a1 e2       	ldi	r26, 0x21	; 33
     d3a:	1a 2e       	mov	r1, r26
     d3c:	aa 1b       	sub	r26, r26
     d3e:	bb 1b       	sub	r27, r27
     d40:	fd 01       	movw	r30, r26
     d42:	0d c0       	rjmp	.+26     	; 0xd5e <__udivmodsi4_ep>

00000d44 <__udivmodsi4_loop>:
     d44:	aa 1f       	adc	r26, r26
     d46:	bb 1f       	adc	r27, r27
     d48:	ee 1f       	adc	r30, r30
     d4a:	ff 1f       	adc	r31, r31
     d4c:	a2 17       	cp	r26, r18
     d4e:	b3 07       	cpc	r27, r19
     d50:	e4 07       	cpc	r30, r20
     d52:	f5 07       	cpc	r31, r21
     d54:	20 f0       	brcs	.+8      	; 0xd5e <__udivmodsi4_ep>
     d56:	a2 1b       	sub	r26, r18
     d58:	b3 0b       	sbc	r27, r19
     d5a:	e4 0b       	sbc	r30, r20
     d5c:	f5 0b       	sbc	r31, r21

00000d5e <__udivmodsi4_ep>:
     d5e:	66 1f       	adc	r22, r22
     d60:	77 1f       	adc	r23, r23
     d62:	88 1f       	adc	r24, r24
     d64:	99 1f       	adc	r25, r25
     d66:	1a 94       	dec	r1
     d68:	69 f7       	brne	.-38     	; 0xd44 <__udivmodsi4_loop>
     d6a:	60 95       	com	r22
     d6c:	70 95       	com	r23
     d6e:	80 95       	com	r24
     d70:	90 95       	com	r25
     d72:	9b 01       	movw	r18, r22
     d74:	ac 01       	movw	r20, r24
     d76:	bd 01       	movw	r22, r26
     d78:	cf 01       	movw	r24, r30
     d7a:	08 95       	ret

00000d7c <__muluhisi3>:
     d7c:	0e 94 c9 06 	call	0xd92	; 0xd92 <__umulhisi3>
     d80:	a5 9f       	mul	r26, r21
     d82:	90 0d       	add	r25, r0
     d84:	b4 9f       	mul	r27, r20
     d86:	90 0d       	add	r25, r0
     d88:	a4 9f       	mul	r26, r20
     d8a:	80 0d       	add	r24, r0
     d8c:	91 1d       	adc	r25, r1
     d8e:	11 24       	eor	r1, r1
     d90:	08 95       	ret

00000d92 <__umulhisi3>:
     d92:	a2 9f       	mul	r26, r18
     d94:	b0 01       	movw	r22, r0
     d96:	b3 9f       	mul	r27, r19
     d98:	c0 01       	movw	r24, r0
     d9a:	a3 9f       	mul	r26, r19
     d9c:	70 0d       	add	r23, r0
     d9e:	81 1d       	adc	r24, r1
     da0:	11 24       	eor	r1, r1
     da2:	91 1d       	adc	r25, r1
     da4:	b2 9f       	mul	r27, r18
     da6:	70 0d       	add	r23, r0
     da8:	81 1d       	adc	r24, r1
     daa:	11 24       	eor	r1, r1
     dac:	91 1d       	adc	r25, r1
     dae:	08 95       	ret

00000db0 <sprintf>:
     db0:	ae e0       	ldi	r26, 0x0E	; 14
     db2:	b0 e0       	ldi	r27, 0x00	; 0
     db4:	ee ed       	ldi	r30, 0xDE	; 222
     db6:	f6 e0       	ldi	r31, 0x06	; 6
     db8:	0c 94 99 09 	jmp	0x1332	; 0x1332 <__prologue_saves__+0x1c>
     dbc:	0d 89       	ldd	r16, Y+21	; 0x15
     dbe:	1e 89       	ldd	r17, Y+22	; 0x16
     dc0:	86 e0       	ldi	r24, 0x06	; 6
     dc2:	8c 83       	std	Y+4, r24	; 0x04
     dc4:	1a 83       	std	Y+2, r17	; 0x02
     dc6:	09 83       	std	Y+1, r16	; 0x01
     dc8:	8f ef       	ldi	r24, 0xFF	; 255
     dca:	9f e7       	ldi	r25, 0x7F	; 127
     dcc:	9e 83       	std	Y+6, r25	; 0x06
     dce:	8d 83       	std	Y+5, r24	; 0x05
     dd0:	ae 01       	movw	r20, r28
     dd2:	47 5e       	subi	r20, 0xE7	; 231
     dd4:	5f 4f       	sbci	r21, 0xFF	; 255
     dd6:	6f 89       	ldd	r22, Y+23	; 0x17
     dd8:	78 8d       	ldd	r23, Y+24	; 0x18
     dda:	ce 01       	movw	r24, r28
     ddc:	01 96       	adiw	r24, 0x01	; 1
     dde:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <vfprintf>
     de2:	ef 81       	ldd	r30, Y+7	; 0x07
     de4:	f8 85       	ldd	r31, Y+8	; 0x08
     de6:	e0 0f       	add	r30, r16
     de8:	f1 1f       	adc	r31, r17
     dea:	10 82       	st	Z, r1
     dec:	2e 96       	adiw	r28, 0x0e	; 14
     dee:	e4 e0       	ldi	r30, 0x04	; 4
     df0:	0c 94 b5 09 	jmp	0x136a	; 0x136a <__epilogue_restores__+0x1c>

00000df4 <vfprintf>:
     df4:	ab e0       	ldi	r26, 0x0B	; 11
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e0 e0       	ldi	r30, 0x00	; 0
     dfa:	f7 e0       	ldi	r31, 0x07	; 7
     dfc:	0c 94 8b 09 	jmp	0x1316	; 0x1316 <__prologue_saves__>
     e00:	6c 01       	movw	r12, r24
     e02:	7b 01       	movw	r14, r22
     e04:	8a 01       	movw	r16, r20
     e06:	fc 01       	movw	r30, r24
     e08:	17 82       	std	Z+7, r1	; 0x07
     e0a:	16 82       	std	Z+6, r1	; 0x06
     e0c:	83 81       	ldd	r24, Z+3	; 0x03
     e0e:	81 ff       	sbrs	r24, 1
     e10:	cc c1       	rjmp	.+920    	; 0x11aa <vfprintf+0x3b6>
     e12:	ce 01       	movw	r24, r28
     e14:	01 96       	adiw	r24, 0x01	; 1
     e16:	3c 01       	movw	r6, r24
     e18:	f6 01       	movw	r30, r12
     e1a:	93 81       	ldd	r25, Z+3	; 0x03
     e1c:	f7 01       	movw	r30, r14
     e1e:	93 fd       	sbrc	r25, 3
     e20:	85 91       	lpm	r24, Z+
     e22:	93 ff       	sbrs	r25, 3
     e24:	81 91       	ld	r24, Z+
     e26:	7f 01       	movw	r14, r30
     e28:	88 23       	and	r24, r24
     e2a:	09 f4       	brne	.+2      	; 0xe2e <vfprintf+0x3a>
     e2c:	ba c1       	rjmp	.+884    	; 0x11a2 <vfprintf+0x3ae>
     e2e:	85 32       	cpi	r24, 0x25	; 37
     e30:	39 f4       	brne	.+14     	; 0xe40 <vfprintf+0x4c>
     e32:	93 fd       	sbrc	r25, 3
     e34:	85 91       	lpm	r24, Z+
     e36:	93 ff       	sbrs	r25, 3
     e38:	81 91       	ld	r24, Z+
     e3a:	7f 01       	movw	r14, r30
     e3c:	85 32       	cpi	r24, 0x25	; 37
     e3e:	29 f4       	brne	.+10     	; 0xe4a <vfprintf+0x56>
     e40:	b6 01       	movw	r22, r12
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <fputc>
     e48:	e7 cf       	rjmp	.-50     	; 0xe18 <vfprintf+0x24>
     e4a:	91 2c       	mov	r9, r1
     e4c:	21 2c       	mov	r2, r1
     e4e:	31 2c       	mov	r3, r1
     e50:	ff e1       	ldi	r31, 0x1F	; 31
     e52:	f3 15       	cp	r31, r3
     e54:	d8 f0       	brcs	.+54     	; 0xe8c <vfprintf+0x98>
     e56:	8b 32       	cpi	r24, 0x2B	; 43
     e58:	79 f0       	breq	.+30     	; 0xe78 <vfprintf+0x84>
     e5a:	38 f4       	brcc	.+14     	; 0xe6a <vfprintf+0x76>
     e5c:	80 32       	cpi	r24, 0x20	; 32
     e5e:	79 f0       	breq	.+30     	; 0xe7e <vfprintf+0x8a>
     e60:	83 32       	cpi	r24, 0x23	; 35
     e62:	a1 f4       	brne	.+40     	; 0xe8c <vfprintf+0x98>
     e64:	23 2d       	mov	r18, r3
     e66:	20 61       	ori	r18, 0x10	; 16
     e68:	1d c0       	rjmp	.+58     	; 0xea4 <vfprintf+0xb0>
     e6a:	8d 32       	cpi	r24, 0x2D	; 45
     e6c:	61 f0       	breq	.+24     	; 0xe86 <vfprintf+0x92>
     e6e:	80 33       	cpi	r24, 0x30	; 48
     e70:	69 f4       	brne	.+26     	; 0xe8c <vfprintf+0x98>
     e72:	23 2d       	mov	r18, r3
     e74:	21 60       	ori	r18, 0x01	; 1
     e76:	16 c0       	rjmp	.+44     	; 0xea4 <vfprintf+0xb0>
     e78:	83 2d       	mov	r24, r3
     e7a:	82 60       	ori	r24, 0x02	; 2
     e7c:	38 2e       	mov	r3, r24
     e7e:	e3 2d       	mov	r30, r3
     e80:	e4 60       	ori	r30, 0x04	; 4
     e82:	3e 2e       	mov	r3, r30
     e84:	2a c0       	rjmp	.+84     	; 0xeda <vfprintf+0xe6>
     e86:	f3 2d       	mov	r31, r3
     e88:	f8 60       	ori	r31, 0x08	; 8
     e8a:	1d c0       	rjmp	.+58     	; 0xec6 <vfprintf+0xd2>
     e8c:	37 fc       	sbrc	r3, 7
     e8e:	2d c0       	rjmp	.+90     	; 0xeea <vfprintf+0xf6>
     e90:	20 ed       	ldi	r18, 0xD0	; 208
     e92:	28 0f       	add	r18, r24
     e94:	2a 30       	cpi	r18, 0x0A	; 10
     e96:	40 f0       	brcs	.+16     	; 0xea8 <vfprintf+0xb4>
     e98:	8e 32       	cpi	r24, 0x2E	; 46
     e9a:	b9 f4       	brne	.+46     	; 0xeca <vfprintf+0xd6>
     e9c:	36 fc       	sbrc	r3, 6
     e9e:	81 c1       	rjmp	.+770    	; 0x11a2 <vfprintf+0x3ae>
     ea0:	23 2d       	mov	r18, r3
     ea2:	20 64       	ori	r18, 0x40	; 64
     ea4:	32 2e       	mov	r3, r18
     ea6:	19 c0       	rjmp	.+50     	; 0xeda <vfprintf+0xe6>
     ea8:	36 fe       	sbrs	r3, 6
     eaa:	06 c0       	rjmp	.+12     	; 0xeb8 <vfprintf+0xc4>
     eac:	8a e0       	ldi	r24, 0x0A	; 10
     eae:	98 9e       	mul	r9, r24
     eb0:	20 0d       	add	r18, r0
     eb2:	11 24       	eor	r1, r1
     eb4:	92 2e       	mov	r9, r18
     eb6:	11 c0       	rjmp	.+34     	; 0xeda <vfprintf+0xe6>
     eb8:	ea e0       	ldi	r30, 0x0A	; 10
     eba:	2e 9e       	mul	r2, r30
     ebc:	20 0d       	add	r18, r0
     ebe:	11 24       	eor	r1, r1
     ec0:	22 2e       	mov	r2, r18
     ec2:	f3 2d       	mov	r31, r3
     ec4:	f0 62       	ori	r31, 0x20	; 32
     ec6:	3f 2e       	mov	r3, r31
     ec8:	08 c0       	rjmp	.+16     	; 0xeda <vfprintf+0xe6>
     eca:	8c 36       	cpi	r24, 0x6C	; 108
     ecc:	21 f4       	brne	.+8      	; 0xed6 <vfprintf+0xe2>
     ece:	83 2d       	mov	r24, r3
     ed0:	80 68       	ori	r24, 0x80	; 128
     ed2:	38 2e       	mov	r3, r24
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <vfprintf+0xe6>
     ed6:	88 36       	cpi	r24, 0x68	; 104
     ed8:	41 f4       	brne	.+16     	; 0xeea <vfprintf+0xf6>
     eda:	f7 01       	movw	r30, r14
     edc:	93 fd       	sbrc	r25, 3
     ede:	85 91       	lpm	r24, Z+
     ee0:	93 ff       	sbrs	r25, 3
     ee2:	81 91       	ld	r24, Z+
     ee4:	7f 01       	movw	r14, r30
     ee6:	81 11       	cpse	r24, r1
     ee8:	b3 cf       	rjmp	.-154    	; 0xe50 <vfprintf+0x5c>
     eea:	98 2f       	mov	r25, r24
     eec:	9f 7d       	andi	r25, 0xDF	; 223
     eee:	95 54       	subi	r25, 0x45	; 69
     ef0:	93 30       	cpi	r25, 0x03	; 3
     ef2:	28 f4       	brcc	.+10     	; 0xefe <vfprintf+0x10a>
     ef4:	0c 5f       	subi	r16, 0xFC	; 252
     ef6:	1f 4f       	sbci	r17, 0xFF	; 255
     ef8:	9f e3       	ldi	r25, 0x3F	; 63
     efa:	99 83       	std	Y+1, r25	; 0x01
     efc:	0d c0       	rjmp	.+26     	; 0xf18 <vfprintf+0x124>
     efe:	83 36       	cpi	r24, 0x63	; 99
     f00:	31 f0       	breq	.+12     	; 0xf0e <vfprintf+0x11a>
     f02:	83 37       	cpi	r24, 0x73	; 115
     f04:	71 f0       	breq	.+28     	; 0xf22 <vfprintf+0x12e>
     f06:	83 35       	cpi	r24, 0x53	; 83
     f08:	09 f0       	breq	.+2      	; 0xf0c <vfprintf+0x118>
     f0a:	59 c0       	rjmp	.+178    	; 0xfbe <vfprintf+0x1ca>
     f0c:	21 c0       	rjmp	.+66     	; 0xf50 <vfprintf+0x15c>
     f0e:	f8 01       	movw	r30, r16
     f10:	80 81       	ld	r24, Z
     f12:	89 83       	std	Y+1, r24	; 0x01
     f14:	0e 5f       	subi	r16, 0xFE	; 254
     f16:	1f 4f       	sbci	r17, 0xFF	; 255
     f18:	88 24       	eor	r8, r8
     f1a:	83 94       	inc	r8
     f1c:	91 2c       	mov	r9, r1
     f1e:	53 01       	movw	r10, r6
     f20:	13 c0       	rjmp	.+38     	; 0xf48 <vfprintf+0x154>
     f22:	28 01       	movw	r4, r16
     f24:	f2 e0       	ldi	r31, 0x02	; 2
     f26:	4f 0e       	add	r4, r31
     f28:	51 1c       	adc	r5, r1
     f2a:	f8 01       	movw	r30, r16
     f2c:	a0 80       	ld	r10, Z
     f2e:	b1 80       	ldd	r11, Z+1	; 0x01
     f30:	36 fe       	sbrs	r3, 6
     f32:	03 c0       	rjmp	.+6      	; 0xf3a <vfprintf+0x146>
     f34:	69 2d       	mov	r22, r9
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	02 c0       	rjmp	.+4      	; 0xf3e <vfprintf+0x14a>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	c5 01       	movw	r24, r10
     f40:	0e 94 e6 08 	call	0x11cc	; 0x11cc <strnlen>
     f44:	4c 01       	movw	r8, r24
     f46:	82 01       	movw	r16, r4
     f48:	f3 2d       	mov	r31, r3
     f4a:	ff 77       	andi	r31, 0x7F	; 127
     f4c:	3f 2e       	mov	r3, r31
     f4e:	16 c0       	rjmp	.+44     	; 0xf7c <vfprintf+0x188>
     f50:	28 01       	movw	r4, r16
     f52:	22 e0       	ldi	r18, 0x02	; 2
     f54:	42 0e       	add	r4, r18
     f56:	51 1c       	adc	r5, r1
     f58:	f8 01       	movw	r30, r16
     f5a:	a0 80       	ld	r10, Z
     f5c:	b1 80       	ldd	r11, Z+1	; 0x01
     f5e:	36 fe       	sbrs	r3, 6
     f60:	03 c0       	rjmp	.+6      	; 0xf68 <vfprintf+0x174>
     f62:	69 2d       	mov	r22, r9
     f64:	70 e0       	ldi	r23, 0x00	; 0
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <vfprintf+0x178>
     f68:	6f ef       	ldi	r22, 0xFF	; 255
     f6a:	7f ef       	ldi	r23, 0xFF	; 255
     f6c:	c5 01       	movw	r24, r10
     f6e:	0e 94 db 08 	call	0x11b6	; 0x11b6 <strnlen_P>
     f72:	4c 01       	movw	r8, r24
     f74:	f3 2d       	mov	r31, r3
     f76:	f0 68       	ori	r31, 0x80	; 128
     f78:	3f 2e       	mov	r3, r31
     f7a:	82 01       	movw	r16, r4
     f7c:	33 fc       	sbrc	r3, 3
     f7e:	1b c0       	rjmp	.+54     	; 0xfb6 <vfprintf+0x1c2>
     f80:	82 2d       	mov	r24, r2
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	88 16       	cp	r8, r24
     f86:	99 06       	cpc	r9, r25
     f88:	b0 f4       	brcc	.+44     	; 0xfb6 <vfprintf+0x1c2>
     f8a:	b6 01       	movw	r22, r12
     f8c:	80 e2       	ldi	r24, 0x20	; 32
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <fputc>
     f94:	2a 94       	dec	r2
     f96:	f4 cf       	rjmp	.-24     	; 0xf80 <vfprintf+0x18c>
     f98:	f5 01       	movw	r30, r10
     f9a:	37 fc       	sbrc	r3, 7
     f9c:	85 91       	lpm	r24, Z+
     f9e:	37 fe       	sbrs	r3, 7
     fa0:	81 91       	ld	r24, Z+
     fa2:	5f 01       	movw	r10, r30
     fa4:	b6 01       	movw	r22, r12
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <fputc>
     fac:	21 10       	cpse	r2, r1
     fae:	2a 94       	dec	r2
     fb0:	21 e0       	ldi	r18, 0x01	; 1
     fb2:	82 1a       	sub	r8, r18
     fb4:	91 08       	sbc	r9, r1
     fb6:	81 14       	cp	r8, r1
     fb8:	91 04       	cpc	r9, r1
     fba:	71 f7       	brne	.-36     	; 0xf98 <vfprintf+0x1a4>
     fbc:	e8 c0       	rjmp	.+464    	; 0x118e <vfprintf+0x39a>
     fbe:	84 36       	cpi	r24, 0x64	; 100
     fc0:	11 f0       	breq	.+4      	; 0xfc6 <vfprintf+0x1d2>
     fc2:	89 36       	cpi	r24, 0x69	; 105
     fc4:	41 f5       	brne	.+80     	; 0x1016 <vfprintf+0x222>
     fc6:	f8 01       	movw	r30, r16
     fc8:	37 fe       	sbrs	r3, 7
     fca:	07 c0       	rjmp	.+14     	; 0xfda <vfprintf+0x1e6>
     fcc:	60 81       	ld	r22, Z
     fce:	71 81       	ldd	r23, Z+1	; 0x01
     fd0:	82 81       	ldd	r24, Z+2	; 0x02
     fd2:	93 81       	ldd	r25, Z+3	; 0x03
     fd4:	0c 5f       	subi	r16, 0xFC	; 252
     fd6:	1f 4f       	sbci	r17, 0xFF	; 255
     fd8:	08 c0       	rjmp	.+16     	; 0xfea <vfprintf+0x1f6>
     fda:	60 81       	ld	r22, Z
     fdc:	71 81       	ldd	r23, Z+1	; 0x01
     fde:	07 2e       	mov	r0, r23
     fe0:	00 0c       	add	r0, r0
     fe2:	88 0b       	sbc	r24, r24
     fe4:	99 0b       	sbc	r25, r25
     fe6:	0e 5f       	subi	r16, 0xFE	; 254
     fe8:	1f 4f       	sbci	r17, 0xFF	; 255
     fea:	f3 2d       	mov	r31, r3
     fec:	ff 76       	andi	r31, 0x6F	; 111
     fee:	3f 2e       	mov	r3, r31
     ff0:	97 ff       	sbrs	r25, 7
     ff2:	09 c0       	rjmp	.+18     	; 0x1006 <vfprintf+0x212>
     ff4:	90 95       	com	r25
     ff6:	80 95       	com	r24
     ff8:	70 95       	com	r23
     ffa:	61 95       	neg	r22
     ffc:	7f 4f       	sbci	r23, 0xFF	; 255
     ffe:	8f 4f       	sbci	r24, 0xFF	; 255
    1000:	9f 4f       	sbci	r25, 0xFF	; 255
    1002:	f0 68       	ori	r31, 0x80	; 128
    1004:	3f 2e       	mov	r3, r31
    1006:	2a e0       	ldi	r18, 0x0A	; 10
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	a3 01       	movw	r20, r6
    100c:	0e 94 2d 09 	call	0x125a	; 0x125a <__ultoa_invert>
    1010:	88 2e       	mov	r8, r24
    1012:	86 18       	sub	r8, r6
    1014:	45 c0       	rjmp	.+138    	; 0x10a0 <vfprintf+0x2ac>
    1016:	85 37       	cpi	r24, 0x75	; 117
    1018:	31 f4       	brne	.+12     	; 0x1026 <vfprintf+0x232>
    101a:	23 2d       	mov	r18, r3
    101c:	2f 7e       	andi	r18, 0xEF	; 239
    101e:	b2 2e       	mov	r11, r18
    1020:	2a e0       	ldi	r18, 0x0A	; 10
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	25 c0       	rjmp	.+74     	; 0x1070 <vfprintf+0x27c>
    1026:	93 2d       	mov	r25, r3
    1028:	99 7f       	andi	r25, 0xF9	; 249
    102a:	b9 2e       	mov	r11, r25
    102c:	8f 36       	cpi	r24, 0x6F	; 111
    102e:	c1 f0       	breq	.+48     	; 0x1060 <vfprintf+0x26c>
    1030:	18 f4       	brcc	.+6      	; 0x1038 <vfprintf+0x244>
    1032:	88 35       	cpi	r24, 0x58	; 88
    1034:	79 f0       	breq	.+30     	; 0x1054 <vfprintf+0x260>
    1036:	b5 c0       	rjmp	.+362    	; 0x11a2 <vfprintf+0x3ae>
    1038:	80 37       	cpi	r24, 0x70	; 112
    103a:	19 f0       	breq	.+6      	; 0x1042 <vfprintf+0x24e>
    103c:	88 37       	cpi	r24, 0x78	; 120
    103e:	21 f0       	breq	.+8      	; 0x1048 <vfprintf+0x254>
    1040:	b0 c0       	rjmp	.+352    	; 0x11a2 <vfprintf+0x3ae>
    1042:	e9 2f       	mov	r30, r25
    1044:	e0 61       	ori	r30, 0x10	; 16
    1046:	be 2e       	mov	r11, r30
    1048:	b4 fe       	sbrs	r11, 4
    104a:	0d c0       	rjmp	.+26     	; 0x1066 <vfprintf+0x272>
    104c:	fb 2d       	mov	r31, r11
    104e:	f4 60       	ori	r31, 0x04	; 4
    1050:	bf 2e       	mov	r11, r31
    1052:	09 c0       	rjmp	.+18     	; 0x1066 <vfprintf+0x272>
    1054:	34 fe       	sbrs	r3, 4
    1056:	0a c0       	rjmp	.+20     	; 0x106c <vfprintf+0x278>
    1058:	29 2f       	mov	r18, r25
    105a:	26 60       	ori	r18, 0x06	; 6
    105c:	b2 2e       	mov	r11, r18
    105e:	06 c0       	rjmp	.+12     	; 0x106c <vfprintf+0x278>
    1060:	28 e0       	ldi	r18, 0x08	; 8
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	05 c0       	rjmp	.+10     	; 0x1070 <vfprintf+0x27c>
    1066:	20 e1       	ldi	r18, 0x10	; 16
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	02 c0       	rjmp	.+4      	; 0x1070 <vfprintf+0x27c>
    106c:	20 e1       	ldi	r18, 0x10	; 16
    106e:	32 e0       	ldi	r19, 0x02	; 2
    1070:	f8 01       	movw	r30, r16
    1072:	b7 fe       	sbrs	r11, 7
    1074:	07 c0       	rjmp	.+14     	; 0x1084 <vfprintf+0x290>
    1076:	60 81       	ld	r22, Z
    1078:	71 81       	ldd	r23, Z+1	; 0x01
    107a:	82 81       	ldd	r24, Z+2	; 0x02
    107c:	93 81       	ldd	r25, Z+3	; 0x03
    107e:	0c 5f       	subi	r16, 0xFC	; 252
    1080:	1f 4f       	sbci	r17, 0xFF	; 255
    1082:	06 c0       	rjmp	.+12     	; 0x1090 <vfprintf+0x29c>
    1084:	60 81       	ld	r22, Z
    1086:	71 81       	ldd	r23, Z+1	; 0x01
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	0e 5f       	subi	r16, 0xFE	; 254
    108e:	1f 4f       	sbci	r17, 0xFF	; 255
    1090:	a3 01       	movw	r20, r6
    1092:	0e 94 2d 09 	call	0x125a	; 0x125a <__ultoa_invert>
    1096:	88 2e       	mov	r8, r24
    1098:	86 18       	sub	r8, r6
    109a:	fb 2d       	mov	r31, r11
    109c:	ff 77       	andi	r31, 0x7F	; 127
    109e:	3f 2e       	mov	r3, r31
    10a0:	36 fe       	sbrs	r3, 6
    10a2:	0d c0       	rjmp	.+26     	; 0x10be <vfprintf+0x2ca>
    10a4:	23 2d       	mov	r18, r3
    10a6:	2e 7f       	andi	r18, 0xFE	; 254
    10a8:	a2 2e       	mov	r10, r18
    10aa:	89 14       	cp	r8, r9
    10ac:	58 f4       	brcc	.+22     	; 0x10c4 <vfprintf+0x2d0>
    10ae:	34 fe       	sbrs	r3, 4
    10b0:	0b c0       	rjmp	.+22     	; 0x10c8 <vfprintf+0x2d4>
    10b2:	32 fc       	sbrc	r3, 2
    10b4:	09 c0       	rjmp	.+18     	; 0x10c8 <vfprintf+0x2d4>
    10b6:	83 2d       	mov	r24, r3
    10b8:	8e 7e       	andi	r24, 0xEE	; 238
    10ba:	a8 2e       	mov	r10, r24
    10bc:	05 c0       	rjmp	.+10     	; 0x10c8 <vfprintf+0x2d4>
    10be:	b8 2c       	mov	r11, r8
    10c0:	a3 2c       	mov	r10, r3
    10c2:	03 c0       	rjmp	.+6      	; 0x10ca <vfprintf+0x2d6>
    10c4:	b8 2c       	mov	r11, r8
    10c6:	01 c0       	rjmp	.+2      	; 0x10ca <vfprintf+0x2d6>
    10c8:	b9 2c       	mov	r11, r9
    10ca:	a4 fe       	sbrs	r10, 4
    10cc:	0f c0       	rjmp	.+30     	; 0x10ec <vfprintf+0x2f8>
    10ce:	fe 01       	movw	r30, r28
    10d0:	e8 0d       	add	r30, r8
    10d2:	f1 1d       	adc	r31, r1
    10d4:	80 81       	ld	r24, Z
    10d6:	80 33       	cpi	r24, 0x30	; 48
    10d8:	21 f4       	brne	.+8      	; 0x10e2 <vfprintf+0x2ee>
    10da:	9a 2d       	mov	r25, r10
    10dc:	99 7e       	andi	r25, 0xE9	; 233
    10de:	a9 2e       	mov	r10, r25
    10e0:	09 c0       	rjmp	.+18     	; 0x10f4 <vfprintf+0x300>
    10e2:	a2 fe       	sbrs	r10, 2
    10e4:	06 c0       	rjmp	.+12     	; 0x10f2 <vfprintf+0x2fe>
    10e6:	b3 94       	inc	r11
    10e8:	b3 94       	inc	r11
    10ea:	04 c0       	rjmp	.+8      	; 0x10f4 <vfprintf+0x300>
    10ec:	8a 2d       	mov	r24, r10
    10ee:	86 78       	andi	r24, 0x86	; 134
    10f0:	09 f0       	breq	.+2      	; 0x10f4 <vfprintf+0x300>
    10f2:	b3 94       	inc	r11
    10f4:	a3 fc       	sbrc	r10, 3
    10f6:	11 c0       	rjmp	.+34     	; 0x111a <vfprintf+0x326>
    10f8:	a0 fe       	sbrs	r10, 0
    10fa:	06 c0       	rjmp	.+12     	; 0x1108 <vfprintf+0x314>
    10fc:	b2 14       	cp	r11, r2
    10fe:	88 f4       	brcc	.+34     	; 0x1122 <vfprintf+0x32e>
    1100:	28 0c       	add	r2, r8
    1102:	92 2c       	mov	r9, r2
    1104:	9b 18       	sub	r9, r11
    1106:	0e c0       	rjmp	.+28     	; 0x1124 <vfprintf+0x330>
    1108:	b2 14       	cp	r11, r2
    110a:	60 f4       	brcc	.+24     	; 0x1124 <vfprintf+0x330>
    110c:	b6 01       	movw	r22, r12
    110e:	80 e2       	ldi	r24, 0x20	; 32
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <fputc>
    1116:	b3 94       	inc	r11
    1118:	f7 cf       	rjmp	.-18     	; 0x1108 <vfprintf+0x314>
    111a:	b2 14       	cp	r11, r2
    111c:	18 f4       	brcc	.+6      	; 0x1124 <vfprintf+0x330>
    111e:	2b 18       	sub	r2, r11
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <vfprintf+0x332>
    1122:	98 2c       	mov	r9, r8
    1124:	21 2c       	mov	r2, r1
    1126:	a4 fe       	sbrs	r10, 4
    1128:	10 c0       	rjmp	.+32     	; 0x114a <vfprintf+0x356>
    112a:	b6 01       	movw	r22, r12
    112c:	80 e3       	ldi	r24, 0x30	; 48
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <fputc>
    1134:	a2 fe       	sbrs	r10, 2
    1136:	17 c0       	rjmp	.+46     	; 0x1166 <vfprintf+0x372>
    1138:	a1 fc       	sbrc	r10, 1
    113a:	03 c0       	rjmp	.+6      	; 0x1142 <vfprintf+0x34e>
    113c:	88 e7       	ldi	r24, 0x78	; 120
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <vfprintf+0x352>
    1142:	88 e5       	ldi	r24, 0x58	; 88
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	b6 01       	movw	r22, r12
    1148:	0c c0       	rjmp	.+24     	; 0x1162 <vfprintf+0x36e>
    114a:	8a 2d       	mov	r24, r10
    114c:	86 78       	andi	r24, 0x86	; 134
    114e:	59 f0       	breq	.+22     	; 0x1166 <vfprintf+0x372>
    1150:	a1 fe       	sbrs	r10, 1
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <vfprintf+0x364>
    1154:	8b e2       	ldi	r24, 0x2B	; 43
    1156:	01 c0       	rjmp	.+2      	; 0x115a <vfprintf+0x366>
    1158:	80 e2       	ldi	r24, 0x20	; 32
    115a:	a7 fc       	sbrc	r10, 7
    115c:	8d e2       	ldi	r24, 0x2D	; 45
    115e:	b6 01       	movw	r22, r12
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <fputc>
    1166:	89 14       	cp	r8, r9
    1168:	38 f4       	brcc	.+14     	; 0x1178 <vfprintf+0x384>
    116a:	b6 01       	movw	r22, r12
    116c:	80 e3       	ldi	r24, 0x30	; 48
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <fputc>
    1174:	9a 94       	dec	r9
    1176:	f7 cf       	rjmp	.-18     	; 0x1166 <vfprintf+0x372>
    1178:	8a 94       	dec	r8
    117a:	f3 01       	movw	r30, r6
    117c:	e8 0d       	add	r30, r8
    117e:	f1 1d       	adc	r31, r1
    1180:	80 81       	ld	r24, Z
    1182:	b6 01       	movw	r22, r12
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <fputc>
    118a:	81 10       	cpse	r8, r1
    118c:	f5 cf       	rjmp	.-22     	; 0x1178 <vfprintf+0x384>
    118e:	22 20       	and	r2, r2
    1190:	09 f4       	brne	.+2      	; 0x1194 <vfprintf+0x3a0>
    1192:	42 ce       	rjmp	.-892    	; 0xe18 <vfprintf+0x24>
    1194:	b6 01       	movw	r22, r12
    1196:	80 e2       	ldi	r24, 0x20	; 32
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <fputc>
    119e:	2a 94       	dec	r2
    11a0:	f6 cf       	rjmp	.-20     	; 0x118e <vfprintf+0x39a>
    11a2:	f6 01       	movw	r30, r12
    11a4:	86 81       	ldd	r24, Z+6	; 0x06
    11a6:	97 81       	ldd	r25, Z+7	; 0x07
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <vfprintf+0x3ba>
    11aa:	8f ef       	ldi	r24, 0xFF	; 255
    11ac:	9f ef       	ldi	r25, 0xFF	; 255
    11ae:	2b 96       	adiw	r28, 0x0b	; 11
    11b0:	e2 e1       	ldi	r30, 0x12	; 18
    11b2:	0c 94 a7 09 	jmp	0x134e	; 0x134e <__epilogue_restores__>

000011b6 <strnlen_P>:
    11b6:	fc 01       	movw	r30, r24
    11b8:	05 90       	lpm	r0, Z+
    11ba:	61 50       	subi	r22, 0x01	; 1
    11bc:	70 40       	sbci	r23, 0x00	; 0
    11be:	01 10       	cpse	r0, r1
    11c0:	d8 f7       	brcc	.-10     	; 0x11b8 <strnlen_P+0x2>
    11c2:	80 95       	com	r24
    11c4:	90 95       	com	r25
    11c6:	8e 0f       	add	r24, r30
    11c8:	9f 1f       	adc	r25, r31
    11ca:	08 95       	ret

000011cc <strnlen>:
    11cc:	fc 01       	movw	r30, r24
    11ce:	61 50       	subi	r22, 0x01	; 1
    11d0:	70 40       	sbci	r23, 0x00	; 0
    11d2:	01 90       	ld	r0, Z+
    11d4:	01 10       	cpse	r0, r1
    11d6:	d8 f7       	brcc	.-10     	; 0x11ce <strnlen+0x2>
    11d8:	80 95       	com	r24
    11da:	90 95       	com	r25
    11dc:	8e 0f       	add	r24, r30
    11de:	9f 1f       	adc	r25, r31
    11e0:	08 95       	ret

000011e2 <fputc>:
    11e2:	0f 93       	push	r16
    11e4:	1f 93       	push	r17
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
    11ea:	fb 01       	movw	r30, r22
    11ec:	23 81       	ldd	r18, Z+3	; 0x03
    11ee:	21 fd       	sbrc	r18, 1
    11f0:	03 c0       	rjmp	.+6      	; 0x11f8 <fputc+0x16>
    11f2:	8f ef       	ldi	r24, 0xFF	; 255
    11f4:	9f ef       	ldi	r25, 0xFF	; 255
    11f6:	2c c0       	rjmp	.+88     	; 0x1250 <fputc+0x6e>
    11f8:	22 ff       	sbrs	r18, 2
    11fa:	16 c0       	rjmp	.+44     	; 0x1228 <fputc+0x46>
    11fc:	46 81       	ldd	r20, Z+6	; 0x06
    11fe:	57 81       	ldd	r21, Z+7	; 0x07
    1200:	24 81       	ldd	r18, Z+4	; 0x04
    1202:	35 81       	ldd	r19, Z+5	; 0x05
    1204:	42 17       	cp	r20, r18
    1206:	53 07       	cpc	r21, r19
    1208:	44 f4       	brge	.+16     	; 0x121a <fputc+0x38>
    120a:	a0 81       	ld	r26, Z
    120c:	b1 81       	ldd	r27, Z+1	; 0x01
    120e:	9d 01       	movw	r18, r26
    1210:	2f 5f       	subi	r18, 0xFF	; 255
    1212:	3f 4f       	sbci	r19, 0xFF	; 255
    1214:	31 83       	std	Z+1, r19	; 0x01
    1216:	20 83       	st	Z, r18
    1218:	8c 93       	st	X, r24
    121a:	26 81       	ldd	r18, Z+6	; 0x06
    121c:	37 81       	ldd	r19, Z+7	; 0x07
    121e:	2f 5f       	subi	r18, 0xFF	; 255
    1220:	3f 4f       	sbci	r19, 0xFF	; 255
    1222:	37 83       	std	Z+7, r19	; 0x07
    1224:	26 83       	std	Z+6, r18	; 0x06
    1226:	14 c0       	rjmp	.+40     	; 0x1250 <fputc+0x6e>
    1228:	8b 01       	movw	r16, r22
    122a:	ec 01       	movw	r28, r24
    122c:	fb 01       	movw	r30, r22
    122e:	00 84       	ldd	r0, Z+8	; 0x08
    1230:	f1 85       	ldd	r31, Z+9	; 0x09
    1232:	e0 2d       	mov	r30, r0
    1234:	09 95       	icall
    1236:	89 2b       	or	r24, r25
    1238:	e1 f6       	brne	.-72     	; 0x11f2 <fputc+0x10>
    123a:	d8 01       	movw	r26, r16
    123c:	16 96       	adiw	r26, 0x06	; 6
    123e:	8d 91       	ld	r24, X+
    1240:	9c 91       	ld	r25, X
    1242:	17 97       	sbiw	r26, 0x07	; 7
    1244:	01 96       	adiw	r24, 0x01	; 1
    1246:	17 96       	adiw	r26, 0x07	; 7
    1248:	9c 93       	st	X, r25
    124a:	8e 93       	st	-X, r24
    124c:	16 97       	sbiw	r26, 0x06	; 6
    124e:	ce 01       	movw	r24, r28
    1250:	df 91       	pop	r29
    1252:	cf 91       	pop	r28
    1254:	1f 91       	pop	r17
    1256:	0f 91       	pop	r16
    1258:	08 95       	ret

0000125a <__ultoa_invert>:
    125a:	fa 01       	movw	r30, r20
    125c:	aa 27       	eor	r26, r26
    125e:	28 30       	cpi	r18, 0x08	; 8
    1260:	51 f1       	breq	.+84     	; 0x12b6 <__ultoa_invert+0x5c>
    1262:	20 31       	cpi	r18, 0x10	; 16
    1264:	81 f1       	breq	.+96     	; 0x12c6 <__ultoa_invert+0x6c>
    1266:	e8 94       	clt
    1268:	6f 93       	push	r22
    126a:	6e 7f       	andi	r22, 0xFE	; 254
    126c:	6e 5f       	subi	r22, 0xFE	; 254
    126e:	7f 4f       	sbci	r23, 0xFF	; 255
    1270:	8f 4f       	sbci	r24, 0xFF	; 255
    1272:	9f 4f       	sbci	r25, 0xFF	; 255
    1274:	af 4f       	sbci	r26, 0xFF	; 255
    1276:	b1 e0       	ldi	r27, 0x01	; 1
    1278:	3e d0       	rcall	.+124    	; 0x12f6 <__ultoa_invert+0x9c>
    127a:	b4 e0       	ldi	r27, 0x04	; 4
    127c:	3c d0       	rcall	.+120    	; 0x12f6 <__ultoa_invert+0x9c>
    127e:	67 0f       	add	r22, r23
    1280:	78 1f       	adc	r23, r24
    1282:	89 1f       	adc	r24, r25
    1284:	9a 1f       	adc	r25, r26
    1286:	a1 1d       	adc	r26, r1
    1288:	68 0f       	add	r22, r24
    128a:	79 1f       	adc	r23, r25
    128c:	8a 1f       	adc	r24, r26
    128e:	91 1d       	adc	r25, r1
    1290:	a1 1d       	adc	r26, r1
    1292:	6a 0f       	add	r22, r26
    1294:	71 1d       	adc	r23, r1
    1296:	81 1d       	adc	r24, r1
    1298:	91 1d       	adc	r25, r1
    129a:	a1 1d       	adc	r26, r1
    129c:	20 d0       	rcall	.+64     	; 0x12de <__ultoa_invert+0x84>
    129e:	09 f4       	brne	.+2      	; 0x12a2 <__ultoa_invert+0x48>
    12a0:	68 94       	set
    12a2:	3f 91       	pop	r19
    12a4:	2a e0       	ldi	r18, 0x0A	; 10
    12a6:	26 9f       	mul	r18, r22
    12a8:	11 24       	eor	r1, r1
    12aa:	30 19       	sub	r19, r0
    12ac:	30 5d       	subi	r19, 0xD0	; 208
    12ae:	31 93       	st	Z+, r19
    12b0:	de f6       	brtc	.-74     	; 0x1268 <__ultoa_invert+0xe>
    12b2:	cf 01       	movw	r24, r30
    12b4:	08 95       	ret
    12b6:	46 2f       	mov	r20, r22
    12b8:	47 70       	andi	r20, 0x07	; 7
    12ba:	40 5d       	subi	r20, 0xD0	; 208
    12bc:	41 93       	st	Z+, r20
    12be:	b3 e0       	ldi	r27, 0x03	; 3
    12c0:	0f d0       	rcall	.+30     	; 0x12e0 <__ultoa_invert+0x86>
    12c2:	c9 f7       	brne	.-14     	; 0x12b6 <__ultoa_invert+0x5c>
    12c4:	f6 cf       	rjmp	.-20     	; 0x12b2 <__ultoa_invert+0x58>
    12c6:	46 2f       	mov	r20, r22
    12c8:	4f 70       	andi	r20, 0x0F	; 15
    12ca:	40 5d       	subi	r20, 0xD0	; 208
    12cc:	4a 33       	cpi	r20, 0x3A	; 58
    12ce:	18 f0       	brcs	.+6      	; 0x12d6 <__ultoa_invert+0x7c>
    12d0:	49 5d       	subi	r20, 0xD9	; 217
    12d2:	31 fd       	sbrc	r19, 1
    12d4:	40 52       	subi	r20, 0x20	; 32
    12d6:	41 93       	st	Z+, r20
    12d8:	02 d0       	rcall	.+4      	; 0x12de <__ultoa_invert+0x84>
    12da:	a9 f7       	brne	.-22     	; 0x12c6 <__ultoa_invert+0x6c>
    12dc:	ea cf       	rjmp	.-44     	; 0x12b2 <__ultoa_invert+0x58>
    12de:	b4 e0       	ldi	r27, 0x04	; 4
    12e0:	a6 95       	lsr	r26
    12e2:	97 95       	ror	r25
    12e4:	87 95       	ror	r24
    12e6:	77 95       	ror	r23
    12e8:	67 95       	ror	r22
    12ea:	ba 95       	dec	r27
    12ec:	c9 f7       	brne	.-14     	; 0x12e0 <__ultoa_invert+0x86>
    12ee:	00 97       	sbiw	r24, 0x00	; 0
    12f0:	61 05       	cpc	r22, r1
    12f2:	71 05       	cpc	r23, r1
    12f4:	08 95       	ret
    12f6:	9b 01       	movw	r18, r22
    12f8:	ac 01       	movw	r20, r24
    12fa:	0a 2e       	mov	r0, r26
    12fc:	06 94       	lsr	r0
    12fe:	57 95       	ror	r21
    1300:	47 95       	ror	r20
    1302:	37 95       	ror	r19
    1304:	27 95       	ror	r18
    1306:	ba 95       	dec	r27
    1308:	c9 f7       	brne	.-14     	; 0x12fc <__ultoa_invert+0xa2>
    130a:	62 0f       	add	r22, r18
    130c:	73 1f       	adc	r23, r19
    130e:	84 1f       	adc	r24, r20
    1310:	95 1f       	adc	r25, r21
    1312:	a0 1d       	adc	r26, r0
    1314:	08 95       	ret

00001316 <__prologue_saves__>:
    1316:	2f 92       	push	r2
    1318:	3f 92       	push	r3
    131a:	4f 92       	push	r4
    131c:	5f 92       	push	r5
    131e:	6f 92       	push	r6
    1320:	7f 92       	push	r7
    1322:	8f 92       	push	r8
    1324:	9f 92       	push	r9
    1326:	af 92       	push	r10
    1328:	bf 92       	push	r11
    132a:	cf 92       	push	r12
    132c:	df 92       	push	r13
    132e:	ef 92       	push	r14
    1330:	ff 92       	push	r15
    1332:	0f 93       	push	r16
    1334:	1f 93       	push	r17
    1336:	cf 93       	push	r28
    1338:	df 93       	push	r29
    133a:	cd b7       	in	r28, 0x3d	; 61
    133c:	de b7       	in	r29, 0x3e	; 62
    133e:	ca 1b       	sub	r28, r26
    1340:	db 0b       	sbc	r29, r27
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	f8 94       	cli
    1346:	de bf       	out	0x3e, r29	; 62
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	cd bf       	out	0x3d, r28	; 61
    134c:	09 94       	ijmp

0000134e <__epilogue_restores__>:
    134e:	2a 88       	ldd	r2, Y+18	; 0x12
    1350:	39 88       	ldd	r3, Y+17	; 0x11
    1352:	48 88       	ldd	r4, Y+16	; 0x10
    1354:	5f 84       	ldd	r5, Y+15	; 0x0f
    1356:	6e 84       	ldd	r6, Y+14	; 0x0e
    1358:	7d 84       	ldd	r7, Y+13	; 0x0d
    135a:	8c 84       	ldd	r8, Y+12	; 0x0c
    135c:	9b 84       	ldd	r9, Y+11	; 0x0b
    135e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1360:	b9 84       	ldd	r11, Y+9	; 0x09
    1362:	c8 84       	ldd	r12, Y+8	; 0x08
    1364:	df 80       	ldd	r13, Y+7	; 0x07
    1366:	ee 80       	ldd	r14, Y+6	; 0x06
    1368:	fd 80       	ldd	r15, Y+5	; 0x05
    136a:	0c 81       	ldd	r16, Y+4	; 0x04
    136c:	1b 81       	ldd	r17, Y+3	; 0x03
    136e:	aa 81       	ldd	r26, Y+2	; 0x02
    1370:	b9 81       	ldd	r27, Y+1	; 0x01
    1372:	ce 0f       	add	r28, r30
    1374:	d1 1d       	adc	r29, r1
    1376:	0f b6       	in	r0, 0x3f	; 63
    1378:	f8 94       	cli
    137a:	de bf       	out	0x3e, r29	; 62
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	cd bf       	out	0x3d, r28	; 61
    1380:	ed 01       	movw	r28, r26
    1382:	08 95       	ret

00001384 <_exit>:
    1384:	f8 94       	cli

00001386 <__stop_program>:
    1386:	ff cf       	rjmp	.-2      	; 0x1386 <__stop_program>
